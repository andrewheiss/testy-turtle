{
  "hash": "0b219944efeff25bd1d7e7aab4d824a3",
  "result": {
    "markdown": "---\ntitle: \"Targets workflow\"\nformat:\n  html:\n    code-fold: true\n---\n\n\n\n\n# targets pipeline\n\nWe use [the magical **targets** package](https://docs.ropensci.org/targets/) to run our analysis and keep track of all dependencies automatically.\n\nTo build our entire project, run `targets::tar_make()` at the R console.\n\nHere's our complete pipeline:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(targets)\ntar_glimpse()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-7a8adf2f057c9c10002a\" style=\"width:85%;height:1112.4px;\" class=\"visNetwork html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7a8adf2f057c9c10002a\">{\"x\":{\"nodes\":{\"name\":[\"aid_purpose_codes_contentiousness\",\"vdem_raw_file\",\"autocracies\",\"dac_purposes_raw_file\",\"m_oda_treatment_total\",\"country_aid_final_winsor\",\"ucdp_prio_clean\",\"civicus_map_data\",\"donor_level_data_usaid\",\"country_aid\",\"softbib_keys\",\"chaudhry_raw\",\"m_oda_outcome_entry\",\"df_oda_iptw_funding\",\"panel_lagged_extra_years\",\"un_gdp_constant_raw_file\",\"disasters_raw_file\",\"var_details\",\"models_tbl_h1_outcome_defacto\",\"misc_funs\",\"models_tbl_h1_treatment_denom\",\"m_purpose_outcome_advocacy\",\"m_purpose_treatment_entry\",\"aid_purposes_manual_edited\",\"usaid_by_country_channel\",\"un_pop\",\"vdem_clean\",\"country_aid_complete\",\"df_oda_iptw_entry\",\"m_purpose_treatment_funding\",\"aid_recipients\",\"democracies\",\"m_purpose_outcome_ccsi\",\"naturalearth_raw_file\",\"m_oda_prelim_time_only_total\",\"softbib_exclude\",\"df_purpose_iptw_funding\",\"m_purpose_treatment_advocacy\",\"aid_purposes_manual\",\"m_oda_treatment_funding\",\"dac_eligible_raw_file\",\"dcjw_clean\",\"m_purpose_treatment_ccsi\",\"un_gdp_current_raw_file\",\"chaudhry_clean\",\"un_pop_raw_file\",\"m_purpose_prelim_time_only_total\",\"df_oda_iptw_total\",\"models_tbl_h1_treatment_num\",\"usaid_clean\",\"disasters_summarized\",\"m_oda_outcome_ccsi\",\"chaudhry_raw_file\",\"m_purpose_outcome_entry\",\"df_oda_iptw_advocacy\",\"m_oda_outcome_total\",\"country_aid_final\",\"usaid_by_country_total\",\"country_aid_no_lags\",\"m_oda_outcome_funding\",\"m_oda_treatment_ccsi\",\"df_purpose_iptw_entry\",\"panel_with_extra_years\",\"m_purpose_outcome_funding\",\"m_oda_treatment_advocacy\",\"usaid_raw_file\",\"models_tbl_h1_outcome_dejure\",\"m_oda_outcome_advocacy\",\"donor_level_data\",\"ngo_index_table\",\"aiddata_final\",\"civicus_raw_file\",\"df_oda_iptw_ccsi\",\"m_purpose_treatment_total\",\"graphic_functions\",\"softbib_bib\",\"ucdp_raw_file\",\"aiddata_raw_file\",\"aid_donors\",\"skeleton\",\"m_oda_treatment_entry\",\"aid_purposes\",\"df_purpose_iptw_total\",\"df_purpose_iptw_advocacy\",\"df_purpose_iptw_ccsi\",\"world_map\",\"un_gdp\",\"civicus_clean\",\"m_purpose_outcome_total\",\"regulations\",\"aiddata_clean\",\"dcjw_raw_file\",\"wdi_clean\"],\"type\":[\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\"],\"status\":[\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"],\"seconds\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"bytes\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"branches\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"label\":[\"aid_purpose_codes_contentiousness\",\"vdem_raw_file\",\"autocracies\",\"dac_purposes_raw_file\",\"m_oda_treatment_total\",\"country_aid_final_winsor\",\"ucdp_prio_clean\",\"civicus_map_data\",\"donor_level_data_usaid\",\"country_aid\",\"softbib_keys\",\"chaudhry_raw\",\"m_oda_outcome_entry\",\"df_oda_iptw_funding\",\"panel_lagged_extra_years\",\"un_gdp_constant_raw_file\",\"disasters_raw_file\",\"var_details\",\"models_tbl_h1_outcome_defacto\",\"misc_funs\",\"models_tbl_h1_treatment_denom\",\"m_purpose_outcome_advocacy\",\"m_purpose_treatment_entry\",\"aid_purposes_manual_edited\",\"usaid_by_country_channel\",\"un_pop\",\"vdem_clean\",\"country_aid_complete\",\"df_oda_iptw_entry\",\"m_purpose_treatment_funding\",\"aid_recipients\",\"democracies\",\"m_purpose_outcome_ccsi\",\"naturalearth_raw_file\",\"m_oda_prelim_time_only_total\",\"softbib_exclude\",\"df_purpose_iptw_funding\",\"m_purpose_treatment_advocacy\",\"aid_purposes_manual\",\"m_oda_treatment_funding\",\"dac_eligible_raw_file\",\"dcjw_clean\",\"m_purpose_treatment_ccsi\",\"un_gdp_current_raw_file\",\"chaudhry_clean\",\"un_pop_raw_file\",\"m_purpose_prelim_time_only_total\",\"df_oda_iptw_total\",\"models_tbl_h1_treatment_num\",\"usaid_clean\",\"disasters_summarized\",\"m_oda_outcome_ccsi\",\"chaudhry_raw_file\",\"m_purpose_outcome_entry\",\"df_oda_iptw_advocacy\",\"m_oda_outcome_total\",\"country_aid_final\",\"usaid_by_country_total\",\"country_aid_no_lags\",\"m_oda_outcome_funding\",\"m_oda_treatment_ccsi\",\"df_purpose_iptw_entry\",\"panel_with_extra_years\",\"m_purpose_outcome_funding\",\"m_oda_treatment_advocacy\",\"usaid_raw_file\",\"models_tbl_h1_outcome_dejure\",\"m_oda_outcome_advocacy\",\"donor_level_data\",\"ngo_index_table\",\"aiddata_final\",\"civicus_raw_file\",\"df_oda_iptw_ccsi\",\"m_purpose_treatment_total\",\"graphic_functions\",\"softbib_bib\",\"ucdp_raw_file\",\"aiddata_raw_file\",\"aid_donors\",\"skeleton\",\"m_oda_treatment_entry\",\"aid_purposes\",\"df_purpose_iptw_total\",\"df_purpose_iptw_advocacy\",\"df_purpose_iptw_ccsi\",\"world_map\",\"un_gdp\",\"civicus_clean\",\"m_purpose_outcome_total\",\"regulations\",\"aiddata_clean\",\"dcjw_raw_file\",\"wdi_clean\"],\"color\":[\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\"],\"id\":[\"aid_purpose_codes_contentiousness\",\"vdem_raw_file\",\"autocracies\",\"dac_purposes_raw_file\",\"m_oda_treatment_total\",\"country_aid_final_winsor\",\"ucdp_prio_clean\",\"civicus_map_data\",\"donor_level_data_usaid\",\"country_aid\",\"softbib_keys\",\"chaudhry_raw\",\"m_oda_outcome_entry\",\"df_oda_iptw_funding\",\"panel_lagged_extra_years\",\"un_gdp_constant_raw_file\",\"disasters_raw_file\",\"var_details\",\"models_tbl_h1_outcome_defacto\",\"misc_funs\",\"models_tbl_h1_treatment_denom\",\"m_purpose_outcome_advocacy\",\"m_purpose_treatment_entry\",\"aid_purposes_manual_edited\",\"usaid_by_country_channel\",\"un_pop\",\"vdem_clean\",\"country_aid_complete\",\"df_oda_iptw_entry\",\"m_purpose_treatment_funding\",\"aid_recipients\",\"democracies\",\"m_purpose_outcome_ccsi\",\"naturalearth_raw_file\",\"m_oda_prelim_time_only_total\",\"softbib_exclude\",\"df_purpose_iptw_funding\",\"m_purpose_treatment_advocacy\",\"aid_purposes_manual\",\"m_oda_treatment_funding\",\"dac_eligible_raw_file\",\"dcjw_clean\",\"m_purpose_treatment_ccsi\",\"un_gdp_current_raw_file\",\"chaudhry_clean\",\"un_pop_raw_file\",\"m_purpose_prelim_time_only_total\",\"df_oda_iptw_total\",\"models_tbl_h1_treatment_num\",\"usaid_clean\",\"disasters_summarized\",\"m_oda_outcome_ccsi\",\"chaudhry_raw_file\",\"m_purpose_outcome_entry\",\"df_oda_iptw_advocacy\",\"m_oda_outcome_total\",\"country_aid_final\",\"usaid_by_country_total\",\"country_aid_no_lags\",\"m_oda_outcome_funding\",\"m_oda_treatment_ccsi\",\"df_purpose_iptw_entry\",\"panel_with_extra_years\",\"m_purpose_outcome_funding\",\"m_oda_treatment_advocacy\",\"usaid_raw_file\",\"models_tbl_h1_outcome_dejure\",\"m_oda_outcome_advocacy\",\"donor_level_data\",\"ngo_index_table\",\"aiddata_final\",\"civicus_raw_file\",\"df_oda_iptw_ccsi\",\"m_purpose_treatment_total\",\"graphic_functions\",\"softbib_bib\",\"ucdp_raw_file\",\"aiddata_raw_file\",\"aid_donors\",\"skeleton\",\"m_oda_treatment_entry\",\"aid_purposes\",\"df_purpose_iptw_total\",\"df_purpose_iptw_advocacy\",\"df_purpose_iptw_ccsi\",\"world_map\",\"un_gdp\",\"civicus_clean\",\"m_purpose_outcome_total\",\"regulations\",\"aiddata_clean\",\"dcjw_raw_file\",\"wdi_clean\"],\"level\":[2,1,4,1,12,12,2,3,5,7,2,2,14,13,10,1,1,0,15,0,13,14,12,1,6,5,2,8,13,12,4,1,14,1,12,1,13,12,2,12,1,2,12,1,3,1,12,13,13,4,4,14,1,14,13,14,11,6,10,14,12,13,9,14,12,1,15,14,6,0,5,1,13,12,0,0,1,1,3,3,12,3,13,13,13,2,4,2,14,1,2,1,4],\"shape\":[\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\"]},\"edges\":{\"from\":[\"aid_purposes_manual_edited\",\"skeleton\",\"vdem_clean\",\"country_aid_final\",\"country_aid_final\",\"ucdp_raw_file\",\"civicus_clean\",\"world_map\",\"skeleton\",\"usaid_clean\",\"aiddata_final\",\"chaudhry_clean\",\"democracies\",\"disasters_summarized\",\"donor_level_data\",\"skeleton\",\"ucdp_prio_clean\",\"un_gdp\",\"un_pop\",\"usaid_by_country_channel\",\"usaid_by_country_total\",\"vdem_clean\",\"softbib_exclude\",\"chaudhry_raw_file\",\"df_oda_iptw_entry\",\"country_aid_final\",\"m_oda_treatment_funding\",\"panel_with_extra_years\",\"m_oda_outcome_ccsi\",\"m_oda_treatment_advocacy\",\"m_oda_treatment_ccsi\",\"m_oda_treatment_entry\",\"m_oda_treatment_funding\",\"m_oda_treatment_total\",\"df_purpose_iptw_advocacy\",\"country_aid_final\",\"donor_level_data_usaid\",\"skeleton\",\"un_pop_raw_file\",\"wdi_clean\",\"vdem_raw_file\",\"country_aid\",\"country_aid_final\",\"m_oda_treatment_entry\",\"country_aid_final\",\"aiddata_clean\",\"skeleton\",\"df_purpose_iptw_ccsi\",\"country_aid_final\",\"country_aid_final\",\"m_purpose_treatment_funding\",\"country_aid_final\",\"dac_purposes_raw_file\",\"country_aid_final\",\"dcjw_raw_file\",\"regulations\",\"country_aid_final\",\"chaudhry_raw\",\"regulations\",\"country_aid_final\",\"country_aid_final\",\"m_oda_treatment_total\",\"m_oda_treatment_advocacy\",\"m_oda_treatment_ccsi\",\"m_oda_treatment_entry\",\"m_oda_treatment_funding\",\"m_oda_treatment_total\",\"skeleton\",\"usaid_raw_file\",\"disasters_raw_file\",\"skeleton\",\"df_oda_iptw_ccsi\",\"df_purpose_iptw_entry\",\"country_aid_final\",\"m_oda_treatment_advocacy\",\"df_oda_iptw_total\",\"panel_lagged_extra_years\",\"donor_level_data_usaid\",\"panel_with_extra_years\",\"df_oda_iptw_funding\",\"country_aid_final\",\"country_aid_final\",\"m_purpose_treatment_entry\",\"country_aid_complete\",\"df_purpose_iptw_funding\",\"country_aid_final\",\"m_oda_outcome_advocacy\",\"m_oda_outcome_entry\",\"m_oda_outcome_funding\",\"m_oda_outcome_total\",\"df_oda_iptw_advocacy\",\"aiddata_final\",\"skeleton\",\"aid_donors\",\"aid_purpose_codes_contentiousness\",\"aid_recipients\",\"aiddata_clean\",\"dac_eligible_raw_file\",\"skeleton\",\"country_aid_final\",\"m_oda_treatment_ccsi\",\"country_aid_final\",\"aiddata_clean\",\"chaudhry_raw\",\"democracies\",\"country_aid_final\",\"aiddata_clean\",\"country_aid_final\",\"m_purpose_treatment_total\",\"country_aid_final\",\"m_purpose_treatment_advocacy\",\"country_aid_final\",\"m_purpose_treatment_ccsi\",\"naturalearth_raw_file\",\"skeleton\",\"un_gdp_constant_raw_file\",\"un_gdp_current_raw_file\",\"civicus_raw_file\",\"df_purpose_iptw_total\",\"aiddata_raw_file\",\"skeleton\"],\"to\":[\"aid_purpose_codes_contentiousness\",\"autocracies\",\"autocracies\",\"m_oda_treatment_total\",\"country_aid_final_winsor\",\"ucdp_prio_clean\",\"civicus_map_data\",\"civicus_map_data\",\"donor_level_data_usaid\",\"donor_level_data_usaid\",\"country_aid\",\"country_aid\",\"country_aid\",\"country_aid\",\"country_aid\",\"country_aid\",\"country_aid\",\"country_aid\",\"country_aid\",\"country_aid\",\"country_aid\",\"country_aid\",\"softbib_keys\",\"chaudhry_raw\",\"m_oda_outcome_entry\",\"df_oda_iptw_funding\",\"df_oda_iptw_funding\",\"panel_lagged_extra_years\",\"models_tbl_h1_outcome_defacto\",\"models_tbl_h1_treatment_denom\",\"models_tbl_h1_treatment_denom\",\"models_tbl_h1_treatment_denom\",\"models_tbl_h1_treatment_denom\",\"models_tbl_h1_treatment_denom\",\"m_purpose_outcome_advocacy\",\"m_purpose_treatment_entry\",\"usaid_by_country_channel\",\"un_pop\",\"un_pop\",\"un_pop\",\"vdem_clean\",\"country_aid_complete\",\"df_oda_iptw_entry\",\"df_oda_iptw_entry\",\"m_purpose_treatment_funding\",\"aid_recipients\",\"aid_recipients\",\"m_purpose_outcome_ccsi\",\"m_oda_prelim_time_only_total\",\"df_purpose_iptw_funding\",\"df_purpose_iptw_funding\",\"m_purpose_treatment_advocacy\",\"aid_purposes_manual\",\"m_oda_treatment_funding\",\"dcjw_clean\",\"dcjw_clean\",\"m_purpose_treatment_ccsi\",\"chaudhry_clean\",\"chaudhry_clean\",\"m_purpose_prelim_time_only_total\",\"df_oda_iptw_total\",\"df_oda_iptw_total\",\"models_tbl_h1_treatment_num\",\"models_tbl_h1_treatment_num\",\"models_tbl_h1_treatment_num\",\"models_tbl_h1_treatment_num\",\"models_tbl_h1_treatment_num\",\"usaid_clean\",\"usaid_clean\",\"disasters_summarized\",\"disasters_summarized\",\"m_oda_outcome_ccsi\",\"m_purpose_outcome_entry\",\"df_oda_iptw_advocacy\",\"df_oda_iptw_advocacy\",\"m_oda_outcome_total\",\"country_aid_final\",\"usaid_by_country_total\",\"country_aid_no_lags\",\"m_oda_outcome_funding\",\"m_oda_treatment_ccsi\",\"df_purpose_iptw_entry\",\"df_purpose_iptw_entry\",\"panel_with_extra_years\",\"m_purpose_outcome_funding\",\"m_oda_treatment_advocacy\",\"models_tbl_h1_outcome_dejure\",\"models_tbl_h1_outcome_dejure\",\"models_tbl_h1_outcome_dejure\",\"models_tbl_h1_outcome_dejure\",\"m_oda_outcome_advocacy\",\"donor_level_data\",\"donor_level_data\",\"aiddata_final\",\"aiddata_final\",\"aiddata_final\",\"aiddata_final\",\"aiddata_final\",\"aiddata_final\",\"df_oda_iptw_ccsi\",\"df_oda_iptw_ccsi\",\"m_purpose_treatment_total\",\"aid_donors\",\"skeleton\",\"skeleton\",\"m_oda_treatment_entry\",\"aid_purposes\",\"df_purpose_iptw_total\",\"df_purpose_iptw_total\",\"df_purpose_iptw_advocacy\",\"df_purpose_iptw_advocacy\",\"df_purpose_iptw_ccsi\",\"df_purpose_iptw_ccsi\",\"world_map\",\"un_gdp\",\"un_gdp\",\"un_gdp\",\"civicus_clean\",\"m_purpose_outcome_total\",\"aiddata_clean\",\"wdi_clean\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Stem\"],\"shape\":[\"dot\"],\"color\":[\"#899DA4\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n# Actual code\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n#### `R/funs_data-cleaning.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(states)\nlibrary(countrycode)\nsuppressPackageStartupMessages(library(lubridate))\nlibrary(haven)\nlibrary(httr)\nlibrary(xml2)\nlibrary(readxl)\nlibrary(WDI)\nsuppressPackageStartupMessages(library(sf))\nlibrary(jsonlite)\nsuppressPackageStartupMessages(library(janitor))\n\n\n# Lookup tables -----------------------------------------------------------\n\ncreate_consolidated_democracies <- function() {\n  consolidated_democracies <- \n    tibble(country_name = c(\"Andorra\", \"Australia\", \"Austria\", \"Bahamas\", \n                            \"Barbados\", \"Belgium\", \"Canada\", \"Denmark\", \"Finland\", \n                            \"France\", \"Germany\", \"Greece\", \"Grenada\", \"Iceland\", \n                            \"Ireland\", \"Italy\", \"Japan\", \"Liechtenstein\", \"Luxembourg\", \n                            \"Malta\", \"Monaco\", \"Netherlands\", \"New Zealand\", \"Norway\", \n                            \"San Marino\", \"Spain\", \"Sweden\", \"Switzerland\", \n                            \"United Kingdom\", \"United States of America\")) %>% \n    # Ignore these 5 microstates, since they're not in the panel skeleton\n    filter(!(country_name %in% c(\"Andorra\", \"Grenada\", \"Liechtenstein\", \n                                 \"Monaco\", \"San Marino\"))) %>% \n    mutate(iso3 = countrycode(country_name, \"country.name\", \"iso3c\"),\n           gwcode = countrycode(country_name, \"country.name\", \"gwn\"))\n  \n  return(consolidated_democracies)\n}\n\ncreate_regulation_lookup <- function() {\n  regulations <- tribble(\n    ~question, ~barrier,       ~question_clean,                  ~ignore_in_index, ~question_display,\n    \"q1a\",     \"association\",  \"const_assoc\",                    TRUE,             \"Constitutional associational rights\",\n    \"q1b\",     \"association\",  \"political_parties\",              TRUE,             \"Citizens form political parties\",\n    \"q2a\",     \"entry\",        \"ngo_register\",                   TRUE,             \"NGO registration required\",\n    \"q2b\",     \"entry\",        \"ngo_register_burden\",            FALSE,            \"NGO registration burdensome\",\n    \"q2c\",     \"entry\",        \"ngo_register_appeal\",            FALSE,            \"NGO registration appealXXXnot allowed\",\n    \"q2d\",     \"entry\",        \"ngo_barrier_foreign_funds\",      FALSE,            \"Registration barriers differentXXXif foreign funds involved\",\n    \"q3a\",     \"funding\",      \"ngo_disclose_funds\",             TRUE,             \"Funds must be disclosed\",\n    \"q3b\",     \"funding\",      \"ngo_foreign_fund_approval\",      FALSE,            \"Prior approval requiredXXXfor foreign funds\",\n    \"q3c\",     \"funding\",      \"ngo_foreign_fund_channel\",       FALSE,            \"Foreign funds channeledXXXthrough government\",\n    \"q3d\",     \"funding\",      \"ngo_foreign_fund_restrict\",      FALSE,            \"Foreign funds restricted\",\n    \"q3e\",     \"funding\",      \"ngo_foreign_fund_prohibit\",      FALSE,            \"Foreign funds prohibited\",\n    \"q3f\",     \"funding\",      \"ngo_type_foreign_fund_prohibit\", FALSE,            \"Foreign funds prohibitedXXXfor some types of NGOs\",\n    \"q4a\",     \"advocacy\",     \"ngo_politics\",                   FALSE,            \"NGOs restricted from politics\",\n    \"q4b\",     \"advocacy\",     \"ngo_politics_intimidation\",      TRUE,             \"NGOs intimidated from politics\",\n    \"q4c\",     \"advocacy\",     \"ngo_politics_foreign_fund\",      FALSE,            \"Political barriers differentXXXif foreign funds involved\"\n  )\n  \n  return(regulations)\n}\n\n\n# Panel skeleton ----------------------------------------------------------\n\nload_chaudhry_raw <- function(path) {\n  # In this data Sudan (625) splits into North Sudan (626) and South Sudan (525)\n  # in 2011, but in the other datasets regular Sudan stays 625 and South Sudan\n  # becomes 626, so adjust the numbers here\n  #\n  # Also, Chad is in the dataset, but all values are missing, so we drop it\n  chaudhry_raw <- read_dta(path) %>% \n    filter(ccode != 483) %>%  # Remove Chad\n    mutate(ccode = case_when(\n      scode == \"SSU\" ~ 626,\n      scode == \"SDN\" ~ 625,\n      TRUE ~ ccode\n    )) %>% \n    mutate(gwcode = countrycode(ccode, origin = \"cown\", destination = \"gwn\",\n                                custom_match = c(\"679\" = 678L, \"818\" = 816L,\n                                                 \"342\" = 345L, \"341\" = 347L,\n                                                 \"348\" = 341L, \"315\" = 316L)))\n  \n  return(chaudhry_raw)\n}\n\ncreate_panel_skeleton <- function(consolidated_democracies, chaudhry_raw) {\n  microstates <- gwstates %>%\n    filter(microstate) %>% distinct(gwcode) %>% \n    as_tibble()\n  \n  chaudhry_countries <- chaudhry_raw %>% distinct(gwcode)\n  \n  # In both COW and GW codes, modern Vietnam is 816, but countrycode() thinks the\n  # COW code is 817, which is old South Vietnam (see issue\n  # https://github.com/vincentarelbundock/countrycode/issues/16), so we use\n  # custom_match to force 816 to recode to 816\n  #\n  # Also, following Gleditsch and Ward, we treat Serbia after 2006 dissolution of\n  # Serbia & Montenegro as 345 in COW codes (see\n  # https://www.andybeger.com/states/articles/differences-gw-cow.html)\n  #\n  # Following V-Dem, we treat Czechoslovakia (GW/COW 315) and Czech Republic\n  # (GW/COW 316) as the same continuous country (V-Dem has both use ID 157).\n  #\n  # Also, because the World Bank doesn't include it in the WDI, we omit\n  # Taiwan (713). We also omit East Germany (265) and South Yemen (680).\n  panel_skeleton_all <- state_panel(1980, 2018, partial = \"any\") %>% \n    # Remove microstates\n    filter(!(gwcode %in% microstates$gwcode)) %>% \n    # Remove East Germany, South Yemen, Taiwan, the Bahamas, Belize, and Brunei\n    filter(!(gwcode %in% c(265, 680, 713, 31, 80, 835))) %>%\n    # Deal with Czechia\n    mutate(gwcode = recode(gwcode, `315` = 316L)) %>% \n    mutate(cowcode = countrycode(gwcode, origin = \"gwn\", destination = \"cown\",\n                                 custom_match = c(\"816\" = 816L, \"340\" = 345L)),\n           country = countrycode(cowcode, origin = \"cown\", destination = \"country.name\",\n                                 custom_match = c(\"678\" = \"Yemen\")),\n           iso2 = countrycode(cowcode, origin = \"cown\", destination = \"iso2c\",\n                              custom_match = c(\"345\" = \"RS\", \"347\" = \"XK\", \"678\" = \"YE\")),\n           iso3 = countrycode(cowcode, origin = \"cown\", destination = \"iso3c\",\n                              custom_match = c(\"345\" = \"SRB\", \"347\" = \"XKK\", \"678\" = \"YEM\")),\n           # Use 999 as the UN country code for Kosovo\n           un = countrycode(cowcode, origin = \"cown\", destination = \"un\",\n                            custom_match = c(\"345\" = 688, \"347\" = 999, \"678\" = 887)),\n           region = countrycode(cowcode, origin = \"cown\", destination = \"region\"),\n           un_region = countrycode(cowcode, origin = \"cown\", destination = \"un.region.name\",\n                                   custom_match = c(\"345\" = \"Europe\", \n                                                    \"347\" = \"Europe\", \n                                                    \"678\" = \"Asia\")),\n           un_subregion = countrycode(cowcode, origin = \"cown\", \n                                      destination = \"un.regionsub.name\",\n                                      custom_match = c(\"345\" = \"Eastern Europe\", \n                                                       \"347\" = \"Eastern Europe\", \n                                                       \"678\" = \"Western Asia\"))) %>% \n    # There are two entries for \"Yugoslavia\" in 2006 after recoding 340 as 345;\n    # get rid of one\n    filter(!(gwcode == 340 & cowcode == 345 & year == 2006)) %>% \n    # Make Serbia 345 in GW codes too, for joining with other datasets\n    mutate(gwcode = recode(gwcode, `340` = 345L)) %>%\n    mutate(country = recode(country, `Yugoslavia` = \"Serbia\")) %>%\n    arrange(gwcode, year)\n  \n  panel_skeleton <- panel_skeleton_all %>% \n    filter(gwcode %in% chaudhry_countries$gwcode) %>% \n    filter(!(gwcode %in% consolidated_democracies$gwcode)) %>% \n    as_tibble()\n  \n  skeleton_lookup <- panel_skeleton %>% \n    group_by(gwcode, cowcode, country, iso2, iso3, un, \n             region, un_region, un_subregion) %>% \n    summarize(years_included = n()) %>% \n    ungroup() %>% \n    arrange(country)\n  \n  return(lst(panel_skeleton, panel_skeleton_all, microstates, skeleton_lookup))\n}\n\n\n# AidData and OECD stuff --------------------------------------------------\n\nget_aiddata <- function(aiddata_url, out_dir, final_name) {\n  aiddata_zip_name <- basename(aiddata_url)  # .zip file only\n  aiddata_name <- tools::file_path_sans_ext(aiddata_zip_name)  # .zip sans extension\n  \n  # Download .zip file\n  aiddata_get <- GET(aiddata_url, \n                     write_disk(here_rel(out_dir, aiddata_zip_name),\n                                overwrite = TRUE), \n                     progress())\n  # Unzip it\n  unzip(here_rel(out_dir, aiddata_zip_name), exdir = out_dir)\n  \n  # Clean up zip file and unnecessary CSV files\n  delete_zip <- file.remove(here_rel(out_dir, aiddata_zip_name))\n  delete_other_csvs <- list.files(out_dir, pattern = \"csv\", full.names = TRUE) %>%\n    map(~ ifelse(str_detect(.x, \"DonorRecipientYearPurpose\"), 0,\n                 file.remove(here_rel(.x))))\n  \n  return(here_rel(out_dir, final_name))\n}\n\nget_dac_purposes <- function(purposes_url, out_dir) {\n  purposes_name <- basename(purposes_url)\n  \n  purposes_get <- GET(purposes_url, \n                      write_disk(here_rel(out_dir, purposes_name),\n                                 overwrite = TRUE), \n                      progress())\n  \n  return(here_rel(out_dir, purposes_name))\n}\n\nclean_aiddata <- function(aiddata_raw) {\n  aiddata_clean <- read_csv(aiddata_raw, col_types = cols()) %>% \n    # Get rid of non-country recipients\n    filter(!str_detect(recipient,\n                       regex(\"regional|unspecified|multi|value|global|commission\", \n                             ignore_case = TRUE))) %>%\n    filter(year < 9999) %>%\n    mutate(purpose_code_short = as.integer(str_sub(coalesced_purpose_code, 1, 3)))\n  \n  return(aiddata_clean)\n}\n\nbuild_aid_donors <- function(aiddata) {\n  # Donor, recipient, and purpose details\n  # I pulled these country names out of the dropdown menu at OECD.Stat Table 2a\n  # online: https://stats.oecd.org/Index.aspx?DataSetCode=Table2A\n  dac_donors <- c(\"Australia\", \"Austria\", \"Belgium\", \"Canada\", \"Czech Republic\",\n                  \"Denmark\", \"Finland\", \"France\", \"Germany\", \"Greece\", \"Iceland\",\n                  \"Ireland\", \"Italy\", \"Japan\", \"Korea\", \"Luxembourg\", \"Netherlands\",\n                  \"New Zealand\", \"Norway\", \"Poland\", \"Portugal\", \"Slovak Republic\",\n                  \"Slovenia\", \"Spain\", \"Sweden\", \"Switzerland\", \"United Kingdom\",\n                  \"United States\")\n  \n  non_dac_donors <- c(\"Bulgaria\", \"Croatia\", \"Cyprus\", \"Estonia\", \"Hungary\",\n                      \"Israel\", \"Kazakhstan\", \"Kuwait\", \"Latvia\", \"Liechtenstein\",\n                      \"Lithuania\", \"Malta\", \"Romania\", \"Russia\", \"Saudi Arabia\",\n                      \"Chinese Taipei\", \"Thailand\", \"Timor Leste\", \"Turkey\",\n                      \"United Arab Emirates\")\n  \n  other_countries <- c(\"Brazil\", \"Chile\", \"Colombia\", \"India\", \"Monaco\", \"Qatar\",\n                       \"South Africa\", \"Taiwan\")\n  \n  donors_all <- aiddata %>%\n    distinct(donor) %>%\n    mutate(donor_type = case_when(\n      donor %in% c(dac_donors, non_dac_donors, other_countries) ~ \"Country\",\n      donor == \"Bill & Melinda Gates Foundation\" ~ \"Private donor\",\n      TRUE ~ \"Multilateral or IGO\"\n    ))\n  \n  donor_countries <- donors_all %>% \n    filter(donor_type == \"Country\") %>% \n    mutate(donor_gwcode = countrycode(donor, \"country.name\", \"gwn\",\n                                      custom_match = c(\"Liechtenstein\" = 223,\n                                                       \"Monaco\" = 221)),\n           donor_iso3 = countrycode(donor, \"country.name\", \"iso3c\"))\n  \n  donors <- bind_rows(filter(donors_all, donor_type != \"Country\"),\n                      donor_countries)\n  \n  return(donors)\n}\n\nbuild_aid_recipients <- function(aiddata, skeleton) {\n  recipients <- aiddata %>%\n    distinct(recipient) %>%\n    mutate(iso3 = countrycode(recipient, \"country.name\", \"iso3c\",\n                              custom_match = c(`Korea, Democratic Republic of` = NA,\n                                               `Netherlands Antilles` = NA,\n                                               Kosovo = \"XKK\",\n                                               `Serbia and Montenegro` = \"SCG\",\n                                               Yugoslavia = \"YUG\"\n                              ))) %>% \n    filter(iso3 %in% unique(skeleton$panel_skeleton$iso3)) %>%\n    mutate(gwcode = countrycode(iso3, \"iso3c\", \"gwn\",\n                                custom_match = c(XKK = 347,\n                                                 YEM = 678)))\n  \n  return(recipients)\n}\n\nbuild_aid_purposes_manual <- function(dac_purposes_raw, out_file) {\n  purpose_nodes <- read_xml(dac_purposes_raw) %>%\n    xml_find_all(\"//codelist-item\")\n  \n  purpose_codes <- tibble(\n    code = purpose_nodes %>% xml_find_first(\".//code\") %>% xml_text(),\n    category = purpose_nodes %>% xml_find_first(\".//category\") %>% xml_text(),\n    # name = purpose_nodes %>% xml_find_first(\".//name//narrative\") %>% xml_text(),\n    name = purpose_nodes %>% xml_find_first(\".//name\") %>% xml_text(),\n    # description = purpose_nodes %>% xml_find_first(\".//description//narrative\") %>% xml_text()\n    description = purpose_nodes %>% xml_find_first(\".//description\") %>% xml_text()\n  )\n  \n  # Extract the general categories of aid purposes (i.e. the first three digits of the purpose codes)\n  general_codes <- purpose_codes %>%\n    filter(code %in% as.character(100:1000) & str_detect(name, \"^\\\\d\")) %>%\n    mutate(code = as.integer(code)) %>%\n    select(purpose_code_short = code, purpose_category_name = name) %>%\n    mutate(purpose_category_clean = str_replace(purpose_category_name,\n                                                \"\\\\d\\\\.\\\\d \", \"\")) %>%\n    separate(purpose_category_clean,\n             into = c(\"purpose_sector\", \"purpose_category\"), \n             sep = \", \") %>%\n    mutate(across(c(purpose_sector, purpose_category), ~str_to_title(.))) %>%\n    select(-purpose_category_name)\n  \n  # These 7 codes are weird and get filtered out inadvertently\n  codes_not_in_oecd_list <- tribble(\n    ~purpose_code_short, ~purpose_sector, ~purpose_category,\n    100,                 \"Social\",        \"Social Infrastructure\",\n    200,                 \"Eco\",           \"Economic Infrastructure\",\n    300,                 \"Prod\",          \"Production\",\n    310,                 \"Prod\",          \"Agriculture\",\n    320,                 \"Prod\",          \"Industry\",\n    420,                 \"Multisector\",   \"Women in development\",\n    # NB: This actually is split between 92010 (domestic NGOs), 92020\n    # (international NGOs), and 92030 (local and regional NGOs)\n    920,                 \"Non Sector\",    \"Support to NGOs\"\n  )\n  \n  purpose_codes_clean <- general_codes %>%\n    bind_rows(codes_not_in_oecd_list) %>%\n    arrange(purpose_code_short) %>%\n    mutate(purpose_contentiousness = \"\")\n  \n  # Manually code contentiousness of purposes\n  write_csv(purpose_codes_clean, out_file)\n  return(out_file)\n}\n\nbuild_aid_purposes <- function(aiddata) {\n  purposes <- aiddata %>%\n    count(coalesced_purpose_name, coalesced_purpose_code)\n  return(purposes)\n}\n\nbuild_aid_contentiousness <- function(path) {\n  out <- read_csv(path, col_types = cols())\n}\n\nbuild_aiddata_final <- function(aiddata, donors, recipients, purpose_codes, skeleton, dac_eligible_raw) {\n  aiddata_final <- aiddata %>%\n    left_join(donors, by = \"donor\") %>%\n    left_join(recipients, by = \"recipient\") %>%\n    left_join(purpose_codes, by = \"purpose_code_short\") %>%\n    mutate(donor_type_collapsed = ifelse(donor_type == \"Country\", \"Country\",\n                                         \"IGO, Multilateral, or Private\")) %>%\n    select(donor, donor_type, donor_type_collapsed,\n           donor_gwcode, donor_iso3, year, gwcode, iso3,\n           oda = commitment_amount_usd_constant_sum,\n           purpose_code_short, purpose_sector, purpose_category,\n           purpose_contentiousness,\n           coalesced_purpose_code, coalesced_purpose_name) %>%\n    arrange(gwcode, year)\n  \n  ever_dac_eligible <- read_csv(dac_eligible_raw, col_types = cols()) %>%\n    # Ignore High Income Countries and More Advanced Developing Countries\n    filter(!(dac_abbr %in% c(\"HIC\", \"ADC\"))) %>%\n    # Ignore countries that aren't in our skeleton panel\n    filter(iso3 %in% skeleton$panel_skeleton$iso3) %>% \n    mutate(gwcode = countrycode(iso3, \"iso3c\", \"gwn\",\n                                custom_match = c(\"YEM\" = 678))) %>% \n    pull(gwcode) %>% unique()\n  \n  return(lst(aiddata_final, ever_dac_eligible))\n}\n\nbuild_donor_aiddata <- function(aiddata, skeleton) {\n  donor_aidraw_data <- aiddata$aiddata_final %>% \n    filter(gwcode %in% unique(skeleton$panel_skeleton$gwcode)) %>%\n    filter(year > 1980) %>%\n    filter(oda > 0) %>%  # Only look at positive aid\n    mutate(oda_log = log1p(oda))\n  \n  # Create fake country codes for non-country donors\n  fake_codes <- donor_aidraw_data %>%\n    distinct(donor, donor_type) %>%\n    filter(donor_type != \"Country\") %>%\n    arrange(donor_type) %>% select(-donor_type) %>%\n    mutate(fake_donor_gwcode = 2001:(2000 + n()),\n           fake_donor_iso3 = paste0(\"Z\", str_sub(fake_donor_gwcode, 3)))\n  \n  donor_level_data <- donor_aidraw_data %>%\n    left_join(fake_codes, by = \"donor\") %>%\n    mutate(donor_gwcode = ifelse(is.na(donor_gwcode), \n                                 fake_donor_gwcode, \n                                 donor_gwcode),\n           donor_iso3 = ifelse(is.na(donor_iso3), \n                               fake_donor_iso3, \n                               donor_iso3)) %>%\n    select(-starts_with(\"fake\"))\n  \n  return(donor_level_data)\n}\n\n\n# USAID stuff -------------------------------------------------------------\n\nget_usaid <- function(usaid_url, out_dir) {\n  usaid_name <- basename(usaid_url)  # filename only\n\n  # Download data file\n  usaid_get <- GET(usaid_url, \n                   write_disk(here_rel(out_dir, usaid_name),\n                              overwrite = TRUE), \n                   progress())\n  \n  return(here_rel(out_dir, usaid_name))\n}\n\nclean_usaid <- function(path, skeleton) {\n  usaid_raw <- read_csv(path, na = c(\"\", \"NA\", \"NULL\"), col_types = cols())\n  \n  usaid_clean <- usaid_raw %>%\n    clean_names() %>% \n    filter(foreign_assistance_objective_name == \"Economic\") %>%\n    filter(transaction_type_name == \"Obligations\") %>%\n    mutate(country_code = recode(country_code, `CS-KM` = \"XKK\")) %>%\n    # Remove regions and World\n    filter(!str_detect(country_name, \"Region\")) %>%\n    filter(!(country_name %in% c(\"World\"))) %>%\n    # Ignore countries that aren't in our skeleton panel\n    filter(country_code %in% skeleton$panel_skeleton$iso3) %>% \n    mutate(gwcode = countrycode(country_code, \"iso3c\", \"gwn\",\n                                custom_match = c(\"YEM\" = 678, \"XKK\" = 347))) %>%\n    select(gwcode, year = fiscal_year, \n           managing_agency_name, managing_sub_agency_or_bureau_name, activity_name,\n           implementing_partner_category_name, implementing_partner_sub_category_name,\n           international_sector_code,\n           oda_us_current = current_dollar_amount, oda_us_2015 = constant_dollar_amount) %>%\n    mutate(aid_deflator = oda_us_current / oda_us_2015 * 100) %>%\n    mutate(channel_ngo_us = implementing_partner_sub_category_name == \"NGO - United States\",\n           channel_ngo_int = implementing_partner_sub_category_name == \"NGO - International\",\n           channel_ngo_dom = implementing_partner_sub_category_name == \"NGO - Non United States\")\n\n  return(usaid_clean)\n}\n\n# USAID's conversion to constant 2015 dollars doesn't seem to take country\n# differences into account—the deflator for each country in 2011 is essentially\n# 96.65. When there are differences, it's because of floating point issues\n# (like, if there are tiny grants of $3, there aren't enough decimal points to\n# get the fraction to 96.65). So we just take the median value of the deflator\n# for all countries and all grants and use that.\nfix_inflation_usaid <- function(usaid, skeleton) {\n  # Rescale the 2015 data to 2011 to match AidData\n  #\n  # Deflator = current aid / constant aid * 100\n  # Current aid in year_t * (deflator in year_target / deflator in year_t)\n  usaid_deflator_2011 <- usaid %>%\n    filter(year == 2011) %>%\n    summarise(deflator_target_year = median(aid_deflator, na.rm = TRUE)) %>%\n    as.numeric()\n  \n  donor_level_data_usaid <- usaid %>%\n    filter(gwcode %in% unique(skeleton$panel_skeleton$gwcode)) %>%\n    filter(year > 1980) %>%\n    filter(oda_us_current > 0) %>%\n    mutate(oda_us_2011 = oda_us_current * (usaid_deflator_2011 / aid_deflator)) %>% \n    mutate(year = as.numeric(year))\n  \n  return(donor_level_data_usaid)\n}\n\nbuild_usaid_by_country_total <- function(usaid) {\n  usaid_by_country_total <- usaid %>%\n    group_by(gwcode, year) %>%\n    summarise(oda_us = sum(oda_us_2011, na.rm = TRUE))\n  \n  return(usaid_by_country_total)\n}\n\nbuild_usaid_by_country_channel <- function(usaid) {\n  usaid_by_country_channel <- usaid %>%\n    pivot_longer(names_to = \"key\", values_to = \"value\", \n                 c(channel_ngo_us, channel_ngo_int, channel_ngo_dom)) %>%\n    group_by(gwcode, year, key, value) %>%\n    summarise(total_oda_us = sum(oda_us_2011, na.rm = TRUE)) %>%\n    ungroup() %>%\n    unite(channel, key, value) %>%\n    filter(str_detect(channel, \"TRUE\")) %>%\n    mutate(channel = str_replace(channel, \"channel\", \"oda_us\"),\n           channel = str_replace(channel, \"_TRUE\", \"\")) %>%\n    spread(channel, total_oda_us, fill = 0)\n  \n  return(usaid_by_country_channel)\n}\n\n\n# NGO restrictions --------------------------------------------------------\n\nload_clean_dcjw <- function(path, regulations) {\n  dcjw_orig <- read_excel(path) %>% \n    select(-c(contains(\"source\"), contains(\"burden\"), \n              contains(\"subset\"), Coder, Date))\n  \n  dcjw_tidy <- dcjw_orig %>%\n    mutate(across(everything(), as.character)) %>%\n    pivot_longer(names_to = \"key\", values_to = \"value\", -Country) %>% \n    separate(key, c(\"question\", \"var_name\"), 4) %>%\n    mutate(var_name = ifelse(var_name == \"\", \"value\", gsub(\"_\", \"\", var_name))) %>%\n    pivot_wider(names_from = \"var_name\", values_from = \"value\") %>% \n    # Remove underscore to match Chaudhry's stuff\n    mutate(question = str_remove(question, \"_\")) %>% \n    mutate(value = as.numeric(value)) %>% \n    # Reverse values for q2c\n    mutate(value = ifelse(question == \"q2c\", 1 - value, value)) %>% \n    # Rescale 2-point questions to 0-1 scale\n    mutate(value = ifelse(question %in% c(\"q3e\", \"q3f\", \"q4a\"),\n                          rescale(value, to = c(0, 1), from = c(0, 2)),\n                          value)) %>% \n    # q2d and q4c use -1 to indicate less restriction/burdensomeness. Since we're\n    # concerned with an index of restriction, we make the negative values zero\n    mutate(value = ifelse(question %in% c(\"q2d\", \"q4c\") & value == -1,\n                          0, value)) %>% \n    # Get rid of rows where year is missing and regulation was not imposed\n    filter(!(is.na(year) & value == 0)) %>%\n    # Some entries have multiple years; for now just use the first year\n    mutate(year = str_split(year, \",\")) %>% unnest(year) %>% \n    group_by(Country, question) %>% slice(1) %>% ungroup() %>%\n    mutate(value = as.integer(value), year = as.integer(year)) %>% \n    mutate(Country = countrycode(Country, \"country.name\", \"country.name\"),\n           gwcode = countrycode(Country, \"country.name\", \"gwn\",\n                                custom_match = c(\"Yemen\" = 678))) %>% \n    # If year is missing but some regulation exists, assume it has always already\n    # existed (since 1950, arbitrarily)\n    mutate(year = ifelse(is.na(year), 1950, year))\n  \n  potential_dcjw_panel <- dcjw_tidy %>%\n    tidyr::expand(gwcode, question, \n                  year = min(.$year, na.rm = TRUE):2015)\n  \n  dcjw_clean <- dcjw_tidy %>%\n    select(-Country) %>% \n    right_join(potential_dcjw_panel,\n               by = c(\"gwcode\", \"question\", \"year\")) %>% \n    arrange(gwcode, year) %>% \n    left_join(regulations, by = \"question\") %>% \n    filter(!ignore_in_index) %>% \n    group_by(gwcode) %>%\n    mutate(all_missing = all(is.na(value))) %>%\n    group_by(gwcode, question) %>% \n    # Bring most recent legislation forward in time\n    fill(value) %>% \n    # For older NA legislation that can't be brought forward, set sensible\n    # defaults. Leave countries that are 100% 0 as NA.\n    mutate(value = ifelse(!all_missing & is.na(value), 0, value)) %>% \n    group_by(gwcode, year, barrier) %>%\n    summarize(total = sum(value)) %>%\n    ungroup() %>%\n    pivot_wider(names_from = \"barrier\", values_from = \"total\") %>%\n    filter(year > 1978) %>% \n    # Standardize barrier indexes by dividing by maximum number possible\n    mutate(across(c(entry, funding, advocacy), \n                  list(std = ~ . / max(., na.rm = TRUE)))) %>% \n    mutate(barriers_total = advocacy + entry + funding,\n           barriers_total_std = advocacy_std + entry_std + funding_std)\n  \n  return(dcjw_clean)\n}\n\nload_clean_chaudhry <- function(chaudhry_raw, regulations) {\n  chaudhry_2014 <- expand_grid(gwcode = unique(chaudhry_raw$gwcode), \n                               year = 2014)\n  \n  chaudhry_long <- chaudhry_raw %>%\n    # Bring in 2014 rows\n    bind_rows(chaudhry_2014) %>%\n    # Ethiopia and Czech Republic have duplicate rows in 1993 and 1994 respectively, \n    # but the values are identical, so just keep the first of the two\n    group_by(gwcode, year) %>%\n    slice(1) %>%\n    ungroup() %>%\n    arrange(gwcode, year) %>%\n    # Reverse values for q2c\n    mutate(q2c = 1 - q2c) %>%\n    # Rescale 2-point questions to 0-1 scale\n    mutate_at(vars(q3e, q3f, q4a), ~rescale(., to = c(0, 1), from = c(0, 2))) %>%\n    # q2d and q4c use -1 to indicate less restriction/burdensomeness. Since we're\n    # concerned with an index of restriction, we make the negative values zero\n    mutate_at(vars(q2d, q4c), ~ifelse(. == -1, 0, .)) %>%\n    pivot_longer(cols = starts_with(\"q\"), names_to = \"question\") %>%\n    left_join(regulations, by = \"question\") %>%\n    group_by(gwcode) %>%\n    mutate(all_missing = all(is.na(value))) %>%\n    group_by(gwcode, question) %>%\n    # Bring most recent legislation forward in time\n    fill(value) %>%\n    # For older NA legislation that can't be brought forward, set sensible\n    # defaults. Leave countries that are 100% 0 as NA.\n    mutate(value = ifelse(!all_missing & is.na(value), 0, value)) %>%\n    ungroup()\n  \n  chaudhry_registration <- chaudhry_long %>%\n    select(gwcode, year, question_clean, value) %>%\n    pivot_wider(names_from = \"question_clean\", values_from = \"value\")\n  \n  chaudhry_summed <- chaudhry_long %>%\n    filter(!ignore_in_index) %>%\n    group_by(gwcode, year, barrier) %>%\n    summarize(total = sum(value)) %>%\n    ungroup()\n  \n  chaudhry_clean <- chaudhry_summed %>%\n    pivot_wider(names_from = barrier, values_from = total) %>%\n    mutate_at(vars(entry, funding, advocacy),\n              list(std = ~. / max(., na.rm = TRUE))) %>%\n    mutate(barriers_total = advocacy + entry + funding,\n           barriers_total_std = advocacy_std + entry_std + funding_std) %>%\n    left_join(chaudhry_registration, by = c(\"gwcode\", \"year\"))\n  \n  # In Suparna's clean data, due to post-Cold War chaos, Russia (365) is missing\n  # for 1990-1991 and Serbia/Serbia and Montenegro/Yugoslavia (345) is missing\n  # every thing pre-2006. DCJW don't include any data for Serbia, so we're out\n  # of luck there—we're limited to Serbia itself and not past versions of it.\n  # DCJW *do* include data for Russia, though, so we use that in our clean final\n  # NGO laws data. Fortunately this is easy, since Russia's values are all 0 for\n  # those two years. We just add two rows for Russia in 1990 and 1991 from DCJW\n  early_russia <- tibble(gwcode = 365, year = c(1990, 1991),\n                         advocacy = 0, entry = 0, funding = 0, \n                         entry_std = 0, funding_std = 0, advocacy_std = 0, \n                         barriers_total = 0, barriers_total_std = 0)\n  \n  chaudhry_clean <- chaudhry_clean %>% \n    bind_rows(early_russia) %>% \n    arrange(gwcode, year)\n  \n  return(chaudhry_clean)\n}\n\n\n# V-Dem -------------------------------------------------------------------\n\nload_clean_vdem <- function(path) {\n  vdem_raw <- read_rds(path) %>% as_tibble()\n  \n  vdem_clean <- vdem_raw %>%\n    filter(year >= 1980) %>%\n    select(country_name, year, cowcode = COWcode,\n           \n           # Civil society stuff\n           v2cseeorgs,  # CSO entry and exit\n           v2csreprss,  # CSO repression\n           v2cscnsult,  # CSO consultation\n           v2csprtcpt,  # CSO participatory environment\n           v2csgender,  # CSO women's participation\n           v2csantimv,  # CSO anti-system movements\n           v2xcs_ccsi,  # Core civil society index (entry/exit, repression, participatory env)\n           \n           # Human rights and politics\n           # Political corruption index (less to more, 0-1) (public sector +\n           # executive + legislative + judicial corruption)\n           v2x_corr,\n           v2x_rule,  # Rule of law index\n           # Rights indexes\n           v2x_civlib,  # Civil liberties index\n           v2x_clphy,  # Physical violence index\n           v2x_clpriv,  # Private civil liberties index\n           v2x_clpol,  # Political civil liberties index\n           # Democracy\n           e_polity2, v2x_polyarchy, v2x_regime_amb,\n           # Economics and development\n           v2peedueq,  # Educational equality\n           v2pehealth,  # Health equality\n           e_peinfmor  # Infant mortality rate\n    ) %>%\n    # Get rid of East Germany\n    filter(cowcode != 265) %>%\n    mutate(gwcode = countrycode(cowcode, origin = \"cown\", destination = \"gwn\",\n                                custom_match = c(\"403\" = 403L, \"591\" = 591L,\n                                                 \"679\" = 678L, \"935\" = 935L,\n                                                 \"816\" = 816L, \"260\" = 260L,\n                                                 \"315\" = 316L))) %>%\n    # Get rid of Hong Kong, Palestine (West Bank and Gaza), and Somaliland\n    filter(!is.na(cowcode)) %>%\n    select(-country_name, -cowcode)\n  \n  return(vdem_clean)\n}\n\nbuild_autocracies <- function(vdem, skeleton) {\n  autocracies <- vdem %>% \n    group_by(gwcode) %>% \n    summarize(avg_row = mean(v2x_regime_amb, na.rm = TRUE)) %>% \n    ungroup() \n  \n  autocracies_final <- skeleton$skeleton_lookup %>% \n    left_join(autocracies, by = \"gwcode\") %>% \n    mutate(autocracy = round(avg_row, 0) <= 4)\n}\n\n\n# WDI ---------------------------------------------------------------------\n\nload_clean_wdi <- function(skeleton) {\n  # World Bank World Development Indicators (WDI)\n  # http://data.worldbank.org/data-catalog/world-development-indicators\n  wdi_indicators <- c(\"NY.GDP.PCAP.PP.KD\",  # GDP per capita, ppp (constant 2011 international $)\n                      \"NY.GDP.MKTP.PP.KD\",  # GDP, ppp (constant 2010 international $)\n                      \"NE.TRD.GNFS.ZS\",  # Trade (% of GDP)\n                      \"SP.POP.TOTL\")     # Population, total\n  \n  wdi_raw <- WDI(country = \"all\", wdi_indicators, \n                 extra = TRUE, start = 1980, end = 2018)\n  \n  wdi_clean <- wdi_raw %>%\n    filter(iso2c %in% unique(skeleton$panel_skeleton$iso2)) %>%\n    mutate_at(vars(income, region), as.character) %>%  # Don't use factors\n    mutate(gwcode = countrycode(iso2c, origin = \"iso2c\", destination = \"gwn\",\n                                custom_match = c(\"YE\" = 678L, \"XK\" = 347L, \n                                                 \"VN\" = 816L, \"RS\" = 345L))) %>% \n    mutate(region = ifelse(gwcode == 343, \"Europe & Central Asia\", region),\n           income = ifelse(gwcode == 343, \"Upper middle income\", income)) %>% \n    select(country, gwcode, year, region, income, population = SP.POP.TOTL)\n  \n  return(wdi_clean)\n}\n\n\n# UN data -----------------------------------------------------------------\n\n# Population\n# Total Population - Both Sexes\n# https://population.un.org/wpp/Download/Standard/Population/\nload_clean_un_pop <- function(path, skeleton, wdi) {\n  # The UN doesn't have population data for Kosovo, so we use WDI data for that\n  kosovo_population <- wdi %>%\n    select(gwcode, year, population) %>%\n    filter(gwcode == 347, year >= 2008)\n  \n  un_pop_raw <- read_excel(path, skip = 16)\n  \n  un_pop <- un_pop_raw %>%\n    filter((`Country code` %in% unique(skeleton$panel_skeleton$un))) %>%\n    select(-c(Index, Variant, Notes, `Region, subregion, country or area *`,\n              `Parent code`, Type),\n           un_code = `Country code`) %>%\n    pivot_longer(names_to = \"year\", values_to = \"population\", -un_code) %>%\n    mutate(gwcode = countrycode(un_code, \"un\", \"gwn\",\n                                custom_match = c(\"887\" = 678, \"704\" = 816, \"688\" = 345))) %>%\n    mutate(year = as.integer(year),\n           population = as.numeric(population) * 1000) %>%  # Values are in 1000s\n    select(gwcode, year, population) %>%\n    bind_rows(kosovo_population)\n  \n  return(un_pop)\n}\n\nload_clean_un_gdp <- function(path_constant, path_current, skeleton) {\n  # GDP by Type of Expenditure at constant (2015) prices - US dollars\n  # http://data.un.org/Data.aspx?q=gdp&d=SNAAMA&f=grID%3a102%3bcurrID%3aUSD%3bpcFlag%3a0\n  un_gdp_raw <- read_csv(path_constant, col_types = cols()) %>%\n    rename(country = `Country or Area`) %>%\n    mutate(value_type = \"Constant\")\n  \n  # GDP by Type of Expenditure at current prices - US dollars\n  # http://data.un.org/Data.aspx?q=gdp&d=SNAAMA&f=grID%3a101%3bcurrID%3aUSD%3bpcFlag%3a0\n  un_gdp_current_raw <- read_csv(path_current, col_types = cols()) %>%\n    rename(country = `Country or Area`) %>%\n    mutate(value_type = \"Current\")\n  \n  un_gdp <- bind_rows(un_gdp_raw, un_gdp_current_raw) %>%\n    filter(Item %in% c(\"Gross Domestic Product (GDP)\",\n                       \"Exports of goods and services\",\n                       \"Imports of goods and services\")) %>%\n    filter(!(country %in% c(\"Former USSR\", \"Former Netherlands Antilles\",\n                            \"Yemen: Former Democratic Yemen\",\n                            \"United Republic of Tanzania: Zanzibar\"))) %>%\n    filter(!(country == \"Yemen: Former Yemen Arab Republic\" & Year >= 1989)) %>%\n    filter(!(country == \"Former Czechoslovakia\" & Year >= 1990)) %>%\n    filter(!(country == \"Former Yugoslavia\" & Year >= 1990)) %>%\n    filter(!(country == \"Former Ethiopia\" & Year >= 1990)) %>%\n    mutate(country = recode(country,\n                            \"Former Sudan\" = \"Sudan\",\n                            \"Yemen: Former Yemen Arab Republic\" = \"Yemen\",\n                            \"Former Czechoslovakia\" = \"Czechia\",\n                            \"Former Yugoslavia\" = \"Serbia\")) %>%\n    mutate(iso3 = countrycode(country, \"country.name\", \"iso3c\",\n                              custom_match = c(\"Kosovo\" = \"XKK\"))) %>%\n    left_join(select(skeleton$skeleton_lookup, iso3, gwcode), by = \"iso3\") %>%\n    filter(!is.na(gwcode))\n  \n  un_gdp_wide <- un_gdp %>%\n    select(gwcode, year = Year, Item, Value, value_type) %>%\n    pivot_wider(names_from = c(value_type, Item), values_from = Value) %>%\n    rename(exports_constant_2015 = `Constant_Exports of goods and services`,\n           imports_constant_2015 = `Constant_Imports of goods and services`,\n           gdp_constant_2015 = `Constant_Gross Domestic Product (GDP)`,\n           exports_current = `Current_Exports of goods and services`,\n           imports_current = `Current_Imports of goods and services`,\n           gdp_current = `Current_Gross Domestic Product (GDP)`) %>%\n    mutate(gdp_deflator = gdp_current / gdp_constant_2015 * 100) %>%\n    mutate(un_trade_pct_gdp = (imports_current + exports_current) / gdp_current)\n  \n  # Rescale the 2015 data to 2011 to match AidData\n  #\n  # Deflator = current GDP / constant GDP * 100\n  # Current GDP in year_t * (deflator in year_target / deflator in year_t)\n  un_gdp_rescaled <- un_gdp_wide %>%\n    left_join(select(filter(un_gdp_wide, year == 2011),\n                     gwcode, deflator_target_year = gdp_deflator),\n              by = \"gwcode\") %>%\n    mutate(un_gdp_2011 = gdp_current * (deflator_target_year / gdp_deflator),\n           un_trade_pct_gdp = (imports_current + exports_current) / gdp_current) \n  \n  un_gdp_final <- un_gdp_rescaled %>%\n    select(gwcode, year, un_trade_pct_gdp, un_gdp = un_gdp_2011)\n  \n  return(un_gdp_final)\n}\n\n\n# UCDP --------------------------------------------------------------------\n\nload_clean_ucdp <- function(path) {\n  ucdp_prio_raw <- read_csv(path, col_types = cols())\n  \n  ucdp_prio_clean <- ucdp_prio_raw %>%\n    filter(type_of_conflict == 3) %>%\n    mutate(gwcode_raw = str_split(gwno_a, pattern = \", \")) %>% \n    unnest(gwcode_raw) %>% \n    mutate(gwcode = as.integer(gwcode_raw)) %>% \n    group_by(gwcode, year) %>% \n    summarize(internal_conflict = n() > 0) %>% \n    ungroup()\n  \n  return(ucdp_prio_clean)\n}\n\n\n# EM-DAT disasters --------------------------------------------------------\n\nload_clean_disasters <- function(path, skeleton) {\n  disasters_raw <- read_excel(path, skip = 6)\n  \n  disasters <- disasters_raw %>%\n    # Only look at countries in the main panel\n    filter(ISO %in% unique(skeleton$panel_skeleton$iso3)) %>%\n    filter(`Disaster Group` != \"Complex Disasters\") %>% \n    mutate(gwcode = countrycode(ISO, origin = \"iso3c\", destination = \"gwn\",\n                                custom_match = c(\"YEM\" = \"678\")),\n           gwcode = as.numeric(gwcode)) %>% \n    select(country = Country, year = Year, iso3 = ISO, gwcode,\n           type = `Disaster Type`, group = `Disaster Group`,\n           subgroup = `Disaster Subgroup`,\n           dis_deaths = `Total Deaths`, dis_injured = `No Injured`,\n           dis_affected = `No Affected`, dis_homeless = `No Homeless`,\n           dis_total_affected = `Total Affected`, dis_total_damage = `Total Damages ('000 US$)`)\n  \n  disasters_summarized <- disasters %>% \n    group_by(gwcode, year, group) %>% \n    summarize(across(starts_with(\"dis_\"), ~sum(., na.rm = TRUE)),\n              dis_count = n()) %>% \n    ungroup() %>% \n    filter(group == \"Natural\") %>% \n    pivot_longer(names_to = \"name\", values_to = \"value\", starts_with(\"dis_\")) %>% \n    mutate(group = str_to_lower(group)) %>% \n    unite(name, group, name) %>% \n    pivot_wider(names_from = \"name\", values_from = \"value\") %>% \n    mutate(year = as.numeric(year)) %>% \n    filter(year > 1980)\n  \n  return(disasters_summarized)\n}\n\n\n# Combine,  clean,  and lag everything ------------------------------------\n\nbuild_country_data <- function(skeleton, chaudhry_clean, vdem_clean,\n                               ucdp_prio_clean, disasters_summarized,\n                               aiddata, democracies, un_gdp, un_pop,\n                               donor_level_data, usaid_by_country_total,\n                               usaid_by_country_channel) {\n  country_level_data <- skeleton$panel_skeleton %>% \n    mutate(ever_dac_eligible = gwcode %in% aiddata$ever_dac_eligible) %>% \n    filter(!(gwcode %in% democracies$gwcode)) %>% \n    left_join(un_gdp, by = c(\"gwcode\", \"year\")) %>% \n    left_join(un_pop, by = c(\"gwcode\", \"year\")) %>% \n    mutate(gdpcap = un_gdp / population,\n           gdpcap_log = log(gdpcap),\n           population_log = log(population)) %>% \n    left_join(chaudhry_clean, by = c(\"gwcode\", \"year\")) %>% \n    # Indicator for Chaudhry data coverage\n    # Chaudhry's Serbia data starts with 2006 and doesn't include pre-2006 stuff,\n    # so we mark those as false. Also, Chaudhry starts in 1992 for Russia and 1993\n    # for Czechia, so we mark those as false too\n    mutate(laws = year %in% 1990:2014) %>% \n    mutate(laws = case_when(\n      # Serbia, Czechia, and Russia\n      gwcode == 345 & year <= 2005 ~ FALSE,\n      gwcode == 316 & year <= 1992 ~ FALSE,\n      gwcode == 365 & year <= 1991 ~ FALSE,\n      TRUE ~ laws  # Otherwise, use FALSE\n    )) %>% \n    left_join(vdem_clean, by = c(\"gwcode\", \"year\")) %>%\n    left_join(ucdp_prio_clean, by = c(\"gwcode\", \"year\")) %>% \n    # Treat NAs in conflicts as FALSE\n    mutate(internal_conflict = ifelse(is.na(internal_conflict),\n                                      FALSE, internal_conflict)) %>%\n    left_join(disasters_summarized, \n              by = c(\"gwcode\", \"year\")) %>% \n    # NAs in disasters are really 0, especially when occurrence is 0\n    mutate_at(vars(starts_with(\"natural_\")), ~ifelse(is.na(.), 0, .)) %>%\n    # Add indicator for post-Cold War, since all the former Soviet republics have\n    # no GDP data before 1990\n    mutate(post_1989 = year >= 1990)\n  testthat::expect_equal(nrow(country_level_data), nrow(skeleton$panel_skeleton))\n  \n  # Combine country and donor data\n  donor_country_data <- donor_level_data %>%\n    left_join(select(country_level_data, -country, -iso3),\n              by = c(\"year\", \"gwcode\")) %>% \n    arrange(donor, year)\n  testthat::expect_equal(nrow(donor_country_data), nrow(donor_level_data))\n  \n  # Calculate different versions of aid variables\n  aid_by_country_total <- donor_country_data %>%\n    group_by(gwcode, year) %>%\n    summarise(total_oda = sum(oda, na.rm = TRUE)) %>% \n    ungroup()\n  \n  aid_by_country_purpose <- donor_country_data %>%\n    group_by(gwcode, year, purpose_contentiousness) %>%\n    summarise(total_oda = sum(oda, na.rm = TRUE)) %>%\n    pivot_wider(names_from = \"purpose_contentiousness\", \n                values_from = \"total_oda\", values_fill = 0) %>% \n    rename(oda_contentious_high = High, \n           oda_contentious_low = Low) %>% \n    ungroup()\n  \n  country_aid <- country_level_data %>% \n    left_join(aid_by_country_total, by = c(\"year\", \"gwcode\")) %>% \n    left_join(aid_by_country_purpose, by = c(\"year\", \"gwcode\")) %>% \n    left_join(usaid_by_country_total, by = c(\"year\", \"gwcode\")) %>% \n    left_join(usaid_by_country_channel, by = c(\"year\", \"gwcode\")) %>% \n    mutate(across(contains(\"oda\"), ~ifelse(is.na(.), 0, .)))\n  \n  testthat::expect_equal(nrow(country_aid), nrow(skeleton$panel_skeleton))\n  \n  return(country_aid)\n}\n\nfix_country_data <- function(country_aid) {\n  # Infant mortality `e_peinfmor` is missing from Kosovo (2008–2014), and the\n  # World Bank doesn't have data for it, but Eurostat does in their\n  # `demo_minfind` indicator. Their data, however, is missing a couple years. To\n  # fix this, we use linear interpolation to fill in 2013 and 2014\n  kosovo_infant_mort <- tibble(\n    year = 2007:2019,\n    e_peinfmor = c(11.1, 9.7, 9.9, 8.8, 13.1, 11.4, \n                   NA, NA, 9.7, 8.5, 9.7, 10.6, 8.7)\n  ) %>% \n    zoo::na.approx(.) %>% \n    as_tibble() %>% rename(e_peinfmor_interp = e_peinfmor) %>% \n    mutate(gwcode = 347)\n  \n  # `v2x_corr` is only missing data from Bahrain, which oddly has no data from\n  # 1980–2004. Because corruption levels do not really change after 2005, we\n  # impute the average corruption for the country in all previous years.\n  \n  # Find Bahrain's average corruption\n  avg_corruption_bhr <- country_aid %>% \n    filter(iso3 == \"BHR\") %>% \n    summarize(avg_corr = mean(v2x_corr, na.rm = TRUE)) %>% \n    pull(avg_corr)\n  \n  # `v2x_polyarchy` is only missing in Mozambique from 1980–1993. To address\n  # this, we calculate the average value of V-Dem's polyarchy index\n  # (`v2x_polyarchy`) for each level of Polity (−8, −7, and −6 in the case of\n  # Mozambique), and then use that corresponding average polyarchy\n  \n  # Find average polyarchy scores across different pre-1994 polity scores\n  avg_polyarchy_polity <- country_aid %>% \n    filter(year < 1994) %>% \n    group_by(e_polity2) %>% \n    summarize(avg_polyarchy = mean(v2x_polyarchy, na.rm = TRUE),\n              n = n())\n  \n  country_aid_complete <- country_aid %>% \n    # Get rid of pre-2006 Serbia stuff\n    filter(!(gwcode == 345 & year < 2006)) %>% \n    # Fix Serbia name\n    mutate(country = ifelse(gwcode == 345, \"Serbia\", country)) %>% \n    mutate(v2x_corr = ifelse(is.na(v2x_corr) & iso3 == \"BHR\", \n                             avg_corruption_bhr, v2x_corr)) %>% \n    mutate(imputed_corr = is.na(v2x_corr) & iso3 == \"BHR\") %>% \n    mutate(v2x_polyarchy = case_when(\n      iso3 == \"MOZ\" & is.na(v2x_polyarchy) & e_polity2 == -6 ~ \n        filter(avg_polyarchy_polity, e_polity2 == -6)$avg_polyarchy,\n      iso3 == \"MOZ\" & is.na(v2x_polyarchy) & e_polity2 == -7 ~ \n        filter(avg_polyarchy_polity, e_polity2 == -7)$avg_polyarchy,\n      iso3 == \"MOZ\" & is.na(v2x_polyarchy) & e_polity2 == -8 ~ \n        filter(avg_polyarchy_polity, e_polity2 == -8)$avg_polyarchy,\n      TRUE ~ v2x_polyarchy\n    )) %>% \n    mutate(imputed_polyarchy = is.na(v2x_polyarchy) & iso3 == \"MOZ\") %>% \n    # Add Kosovo infant mortality\n    left_join(kosovo_infant_mort, by = c(\"gwcode\", \"year\")) %>% \n    mutate(e_peinfmor = coalesce(e_peinfmor, e_peinfmor_interp)) %>% \n    # Get rid of polity and RoW---we don't actually need them\n    select(-e_polity2, -v2x_regime_amb, -e_peinfmor_interp)\n  \n  return(country_aid_complete)\n}\n\nmake_final_data <- function(df) {\n  # Determine if any of the values in the last k rows are TRUE\n  check_last_k <- function(x, k) {\n    # This creates a matrix with a column for each lag value (e.g. column 1 = lag\n    # 0, column 2 = lag 1, etc.)\n    all_lags <- sapply(0:k, FUN = function(k) lag(x, k))\n    \n    # Mark TRUE if any of the columns have TRUE in them\n    any_true_in_window <- apply(all_lags, MARGIN = 1, FUN = any, na.rm = TRUE)\n    return(any_true_in_window)\n  }\n  \n  country_aid_final <- df %>% \n    # Proportion of contentious aid\n    mutate(prop_contentious = oda_contentious_high / \n             (oda_contentious_low + oda_contentious_high),\n           prop_contentious = \n             ifelse(oda_contentious_high == 0 & oda_contentious_low == 0, \n                    0, prop_contentious)) %>% \n    mutate(prop_contentious_logit = car::logit(prop_contentious, adjust = 0.001)) %>% \n    # Proportion of aid to NGOs\n    mutate(prop_ngo_int = oda_us_ngo_int / oda_us,\n           prop_ngo_us = oda_us_ngo_us / oda_us,\n           prop_ngo_dom = oda_us_ngo_dom / oda_us,\n           prop_ngo_foreign = (oda_us_ngo_int + oda_us_ngo_us) / oda_us) %>% \n    mutate(across(starts_with(\"prop_ngo\"), ~ifelse(is.nan(.), 0, .))) %>% \n    mutate(across(starts_with(\"prop_ngo\"), list(logit = ~car::logit(., adjust = 0.001)))) %>% \n    mutate(across(c(total_oda, oda_contentious_high, oda_contentious_low, oda_us),\n                  list(log = ~log1p(.)))) %>% \n    # Round down the handful of 1s\n    mutate(across(c(prop_contentious, prop_ngo_int, prop_ngo_us, prop_ngo_dom, prop_ngo_foreign),\n                  list(trunc = ~ ifelse(. == 1, 0.99, .)))) %>% \n    group_by(gwcode) %>% \n    # Determine if there was conflict in the past 5 years\n    mutate(internal_conflict_past_5 = check_last_k(internal_conflict, 5),\n           natural_dis_past_5 = check_last_k(natural_dis_count >= 1, 5)) %>% \n    ungroup()\n  \n  return(country_aid_final)\n}\n\nlag_data <- function(df) {\n  panel_lagged <- df %>% \n    # Lag/lead/diff things within countries\n    group_by(gwcode) %>% \n    # Indicate changes in laws\n    mutate(across(c(advocacy, entry, funding, barriers_total),\n                  list(new = ~. - lag(.),\n                       worse = ~(. - lag(.)) > 0,\n                       cat = ~cut(. - lag(.),\n                                  breaks = c(-Inf, -1, 0, Inf),\n                                  labels = c(\"New better law\", \"No new laws\",\n                                             \"New worse law\"),\n                                  ordered_result = TRUE)))) %>%\n    # Lag and lead stuff\n    # Treatment variables\n    mutate(across(c(barriers_total, advocacy, entry, funding, \n                    barriers_total_new, advocacy_new, entry_new, funding_new,\n                    v2xcs_ccsi, v2csreprss,\n                    total_oda, total_oda_log, \n                    prop_contentious, prop_contentious_trunc, prop_contentious_logit,\n                    prop_ngo_dom, prop_ngo_foreign, \n                    prop_ngo_dom_trunc, prop_ngo_foreign_trunc, \n                    prop_ngo_dom_logit, prop_ngo_foreign_logit),\n                  list(lag1 = ~lag(., n = 1),\n                       lag2 = ~lag(., n = 2)))) %>% \n    # Treatment history\n    mutate(across(c(barriers_total_lag1, advocacy_lag1, entry_lag1, funding_lag1, \n                    barriers_total_new_lag1, advocacy_new_lag1, \n                    entry_new_lag1, funding_new_lag1,\n                    v2xcs_ccsi_lag1, v2csreprss_lag1,\n                    barriers_total_lag2, advocacy_lag2, entry_lag2, funding_lag2, \n                    barriers_total_new_lag2, advocacy_new_lag2, \n                    entry_new_lag2, funding_new_lag2,\n                    v2xcs_ccsi_lag2, v2csreprss_lag2),\n                  list(cumsum = ~cumsum_na(.)))) %>% \n    # Outcome variables\n    mutate(across(c(total_oda, total_oda_log, oda_us, oda_us_log,\n                    oda_contentious_low, oda_contentious_high,\n                    prop_contentious, prop_contentious_trunc, prop_contentious_logit,\n                    oda_us_ngo_dom, oda_us_ngo_int,\n                    prop_ngo_dom, prop_ngo_foreign,\n                    prop_ngo_dom_trunc, prop_ngo_foreign_trunc,\n                    prop_ngo_dom_logit, prop_ngo_foreign_logit),\n                  list(lead1 = ~lead(., n = 1)))) %>% \n    # Shrink down year (years since 1989, so 1990 = 1; 2012 = 23)\n    # Also center year at 2000, so 1990 = -10; 2012 = 12\n    mutate(year_small = year - 1989,\n           year_c = year - 2000) %>% \n    ungroup()\n  \n  return(panel_lagged)\n}\n\ntrim_data <- function(df) {\n  df %>% filter(year >= 1990 & year < 2014)\n}\n\n# AidData ends at 2013, so all the oda_lead variables in 2013 are 0\ntrim_oecd <- function(df) {\n  df %>% filter(year != 2013)\n}\n\nwinsorize_one <- function(df) {\n  df <- df %>% \n    # Winsorize prop_contentious for the two cases that are exactly 1\n    mutate(across(starts_with(\"prop_contentious\"), list(orig = ~.))) %>% \n    mutate(across(c(starts_with(\"prop_contentious\") & !contains(\"orig\")), \n                  ~ifelse(. == 1, 0.999, .))) %>% \n    # Winsorize prop_ngo* for the few cases that are exactly 1\n    mutate(across(starts_with(\"prop_ngo\"), list(orig = ~.))) %>% \n    mutate(across(c(starts_with(\"prop_ngo\") & !contains(\"orig\")), \n                  ~ifelse(. == 1, 0.999, .)))\n  \n  return(df)\n}\n\n\n# World map ---------------------------------------------------------------\n\nload_world_map <- function(path) {\n  world_map <- read_sf(path) %>%\n    filter(ISO_A3 != \"ATA\")\n  \n  return(world_map)\n}\n\n\n# Civicus Monitor ---------------------------------------------------------\n\n# We downloaded the standalone embeddable widget\n# (https://monitor.civicus.org/widgets/world/) as an HTML file with\n# `wget https://monitor.civicus.org/widgets/world/` and saved it as index_2021-03-19.html\n#\n# We then extracted the COUNTRIES_DATA variable embedded in a <script> tag\n# (xpath = /html/body/script[5]), which is JSON-ish, but not quite. jsonlite\n# can't parse it for whatever reason, but some online JSON formatter and\n# validator could, so we ran it through that and saved the resulting clean file\nload_clean_civicus <- function(path) {\n  civicus_raw <- read_json(path) %>% as_tibble() %>% slice(1)\n  \n  civicus_lookup <- tribble(\n    ~value, ~category,\n    1, \"Closed\",\n    2, \"Repressed\",\n    3, \"Obstructed\",\n    4, \"Narrowed\",\n    5, \"Open\"\n  ) %>%\n    mutate(category = fct_inorder(category, ordered = TRUE))\n  \n  civicus_clean <- civicus_raw %>%\n    pivot_longer(everything(), names_to = \"name\", values_to = \"value\") %>%\n    mutate(value = map_chr(value, ~.)) %>%\n    mutate(value = parse_number(value, na = c(\"\", \"NA\", \"None\"))) %>%\n    mutate(country_name = countrycode(name, \"iso3c\", \"country.name\",\n                                      custom_match = c(\"KOSOVO\" = \"XKK\",\n                                                       \"SVT\" = \"VCT\")),\n           iso3c = countrycode(country_name, \"country.name\", \"iso3c\",\n                               custom_match = c(\"XKK\" = \"Kosovo\",\n                                                \"VCT\" = \"Saint Vincent and the Grenadines\"))) %>%\n    left_join(civicus_lookup, by = \"value\") %>%\n    select(-name, -value, -country_name)\n  \n  return(civicus_clean)\n}\n\ncreate_civicus_map_data <- function(civicus, map) {\n  map_with_civicus <- map %>%\n    # Fix some Natural Earth ISO weirdness\n    mutate(ISO_A3 = ifelse(ISO_A3 == \"-99\", as.character(ISO_A3_EH), as.character(ISO_A3))) %>%\n    mutate(ISO_A3 = case_when(\n      .$ISO_A3 == \"GRL\" ~ \"DNK\",\n      .$NAME == \"Norway\" ~ \"NOR\",\n      .$NAME == \"Kosovo\" ~ \"XKK\",\n      TRUE ~ ISO_A3\n    )) %>%\n    left_join(civicus, by = c(\"ISO_A3\" = \"iso3c\"))\n  \n  return(map_with_civicus)\n}\n\n```\n:::\n\n\n\n\n\n#### `R/funs_details.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Running modelsummary() on Bayesian models takes *forever* because of all the\n# calculations involved in creating the confidence intervals and all the GOF\n# statistics. With modelsummary 0.7, though it's now possible to build the base\n# model with modelsummary(..., output = \"modelsummary_list\", estimate = \"\",\n# statistic = \"\"), save that as an intermediate object, and then feed it through\n# modelsummary() again with whatever other output you want. The\n# modelsummary_list-based object thus acts like an output-agnostic ur-model.\n\nbuild_modelsummary <- function(models) {\n  msl <- modelsummary::modelsummary(models,\n                                    output = \"modelsummary_list\",\n                                    statistic = \"[{conf.low}, {conf.high}]\")\n  return(msl)\n}\n\n\ncreate_vars_table <- function() {\n  vars <- tribble(\n    ~category, ~subcategory, ~format, ~term, ~term_clean, ~term_clean_table, ~source,\n    \"Outcome\", \"\", \"dollar\", \"total_oda\", \"Total aid\", \"Total aid (constant 2011 USD, millions)\", \"OECD and AidData\",\n    \"Outcome\", \"\", \"percent\", \"prop_contentious\", \"Proportion of contentious aid\", \"Proportion of contentious aid\", \"OECD and AidData\",\n    \"Outcome\", \"\", \"percent\", \"prop_ngo_dom\", \"Proportion of aid to domestic NGOs\", \"Proportion of aid to domestic NGOs\", \"USAID\",\n    \"Outcome\", \"\", \"percent\", \"prop_ngo_foreign\", \"Proportion of aid to foreign NGOs\", \"Proportion of aid to foreign NGOs\", \"USAID\",\n    \"Treatment\", \"\", \"number\", \"barriers_total\", \"Total legal barriers\", \"Total legal barriers\", \"@Chaudhry:2016\",\n    \"Treatment\", \"\", \"number\", \"advocacy\", \"Barriers to advocacy\", \"Barriers to advocacy\", \"@Chaudhry:2016\",\n    \"Treatment\", \"\", \"number\", \"entry\", \"Barriers to entry\", \"Barriers to entry\", \"@Chaudhry:2016\",\n    \"Treatment\", \"\", \"number\", \"funding\", \"Barriers to funding\", \"Barriers to funding\", \"@Chaudhry:2016\",\n    \"Treatment\", \"\", \"number\", \"v2xcs_ccsi\", \"Core civil society index\", \"Core civil society index\", \"@Chaudhry:2016\",\n    \"Confounders\", \"Human rights and politics\", \"number\", \"v2x_polyarchy\", \"Electoral democracy index (polyarchy)\", \"Electoral democracy index (polyarchy)\", \"@vdem-v10\",\n    \"Confounders\", \"Human rights and politics\", \"number\", \"v2x_corr\", \"Political corruption index\", \"Political corruption index\", \"@vdem-v10\",\n    \"Confounders\", \"Human rights and politics\", \"number\", \"v2x_rule\", \"Rule of law index\", \"Rule of law index\", \"@vdem-v10\",\n    \"Confounders\", \"Human rights and politics\", \"number\", \"v2x_civlib\", \"Civil liberties index\", \"Civil liberties index\", \"@vdem-v10\",\n    \"Confounders\", \"Human rights and politics\", \"number\", \"v2x_clphy\", \"Physical violence index\", \"Physical violence index\", \"@vdem-v10\",\n    \"Confounders\", \"Human rights and politics\", \"number\", \"v2x_clpriv\", \"Private civil liberties index\", \"Private civil liberties index\", \"@vdem-v10\",\n    \"Confounders\", \"Economics and development\", \"dollar\", \"gdpcap_log\", \"GDP per capita\", \"GDP per capita (constant 2011 USD)\", \"UN\",\n    \"Confounders\", \"Economics and development\", \"percent\", \"un_trade_pct_gdp\", \"Trade as % of GDP\", \"Trade as % of GDP\", \"UN\",\n    \"Confounders\", \"Economics and development\", \"number\", \"v2peedueq\", \"Educational equality\", \"Educational equality\", \"@vdem-v10\",\n    \"Confounders\", \"Economics and development\", \"number\", \"v2pehealth\", \"Health equality\", \"Health equality\", \"@vdem-v10\",\n    \"Confounders\", \"Economics and development\", \"number\", \"e_peinfmor\", \"Infant mortality rate\", \"Infant mortality rate (deaths per 1,000 births)\", \"@vdem-v10\",\n    \"Confounders\", \"Unexpected shocks\", \"number\", \"internal_conflict_past_5\", \"Internal conflict in last 5 years\", \"Internal conflict in last 5 years\", \"UCDP/PRIO\",\n    \"Confounders\", \"Unexpected shocks\", \"number\", \"natural_dis_count\", \"Natural disasters\", \"Natural disasters\", \"EM-DAT\"\n  )\n  \n  return(vars)\n}\n\ncreate_ngo_index_table <- function() {\n  ngo_index <- tribble(\n    ~Index, ~Description, ~Coding,\n    \"Barriers to entry\", \"How burdensome is registration?\", \"Not burdensome = 0; Burdensome = 1\",\n    \"Barriers to entry\", \"In law, can an NGO appeal if denied registration?\", \"Yes = 0; No = 1\",\n    \"Barriers to entry\", \"Are barriers to entry different for NGOs receiving foreign funds?\", \"Less burdensome = -1; Same = 0; More burdensome = 1\",\n    \"Barriers to funding\", \"Do NGOs need prior approval from the government to receive foreign funding?\", \"Yes = 1; No = 0\",\n    \"Barriers to funding\", \"Are NGOs required to channel foreign funding through state-owned banks or government ministries?\", \"Yes = 1; No = 0\",\n    \"Barriers to funding\", \"Are any additional restrictions on foreign support in place?\", \"Yes = 1; No = 0\",\n    \"Barriers to funding\", \"Are all NGOs prohibited from receiving foreign funds?\", \"No = 0; Partially = 0.5; Yes = 1\",\n    \"Barriers to funding\", \"Is a category of NGOs prohibited from receiving foreign funds?\", \"No = 0; Partially = 0.5; Yes = 1\",\n    \"Barriers to advocacy\", \"Does the law restrict NGOs from engaging in political activities?\", \"No = 0; Partially = 0.5; Yes = 1\",\n    \"Barriers to advocacy\", \"Are restrictions on political activities different for NGOs receiving foreign funds?\", \"Less restrictive = -1; Same = 0; More restrictive = 1\"\n  )\n  \n  ngo_index_clean <- ngo_index %>% \n    group_by(Index) %>% \n    mutate(Max = n()) %>% \n    ungroup() %>% \n    mutate(Description = fct_inorder(Description))\n  \n  return(ngo_index_clean)\n}\n```\n:::\n\n\n\n\n\n#### `R/funs_models-iptw.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncumprod_na <- function(x) {\n  x[is.na(x)] <- 1\n  return(cumprod(x))\n}\n\ncumsum_na <- function(x) {\n  x[is.na(x)] <- 0\n  return(cumsum(x))\n}\n\n# Via https://stackoverflow.com/a/55323097/120898\nlhs <- function(x) {\n  if (attr(terms(as.formula(x)), which = \"response\")) {\n    all.vars(x)[1]\n  } else {\n    NULL\n  }\n}\n\ncreate_iptws <- function(dat, wt_model) {\n  pred_num <- predict(wt_model$model_num, newdata = dat, allow_new_levels = TRUE)\n  resid_num <- residuals(wt_model$model_num, newdata = dat, allow_new_levels = TRUE)\n  lhs_num <- lhs(wt_model$model_num$formula$formula)\n  \n  num_actual <- dnorm(dat[[lhs_num]],\n                      pred_num[,1],\n                      sd(resid_num[,1], na.rm = TRUE))\n  \n  pred_denom <- predict(wt_model$model_denom, newdata = dat, allow_new_levels = TRUE)\n  resid_denom <- residuals(wt_model$model_denom, newdata = dat, allow_new_levels = TRUE)\n  lhs_denom <- lhs(wt_model$model_denom$formula$formula)\n  \n  denom_actual <- dnorm(dat[[lhs_denom]],\n                        pred_denom[,1],\n                        sd(resid_denom[,1], na.rm = TRUE))\n  \n  dat <- dat %>% \n    mutate(weights_sans_time = num_actual / denom_actual) %>% \n    group_by(gwcode) %>% \n    mutate(iptw = cumprod_na(weights_sans_time)) %>% \n    ungroup()\n  \n  return(dat)\n}\n```\n:::\n\n\n\n\n\n#### `R/funs_notebook.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# This is adapted from TJ Mahr's {notestar}\n# (https://github.com/tjmahr/notestar/blob/main/R/tar-notebook.R).\n#\n# He did all the hard work figuring out how to dynamically generate targets\n# based on a bunch of files, while also checking for targets dependencies with\n# tarchetypes::tar_knitr_deps(), based on this issue in {tarchetypes}:\n# https://github.com/ropensci/tarchetypes/issues/23\n#\n# I just adapted it for an R Markdown website\n\nnotebook_rmd_collate <- function(dir_notebook = \"analysis\") {\n  index <- file.path(dir_notebook, \"index.Rmd\")\n  posts <- list.files(\n    path = dir_notebook,\n    pattern = \".*.Rmd\",\n    full.names = TRUE\n  )\n  unique(c(index, posts))\n}\n\nrmd_to_html <- function(x) gsub(\"[.]Rmd$\", \".html\", x = x)\nhtml_to_rmd <- function(x) gsub(\"[.]html$\", \".Rmd\", x = x)\n\nlazy_list <- function(...) {\n  q <- rlang::enexprs(..., .named = TRUE, .check_assign = TRUE)\n  data <- list()\n  for (x in seq_along(q)) {\n    data[names(q[x])] <- list(rlang::eval_tidy(q[[x]], data = data))\n  }\n  data\n}\n\nknit_notebook_page <- function(rmd_in, html_out) {\n  rmarkdown::render_site(rmd_in, encoding = \"UTF-8\")\n  html_out\n}\n\ntar_notebook_pages <- function(\n  dir_notebook = \"analysis\",\n  dir_html = \"analysis/_site\",\n  yaml_config = \"analysis/_site.yml\"\n) {\n  \n  rmds <- notebook_rmd_collate(dir_notebook)\n  \n  values <- lazy_list(\n    rmd_file = !! rmds,\n    rmd_page_raw = basename(.data$rmd_file),\n    rmd_page = make.names(.data$rmd_page_raw),\n    sym_rmd_page = rlang::syms(.data$rmd_page),\n    rmd_deps = lapply(.data$rmd_file, tarchetypes::tar_knitr_deps_expr),\n    html_page = rmd_to_html(.data$rmd_page),\n    html_page_raw = rmd_to_html(.data$rmd_page_raw),\n    html_file = file.path(!! dir_html, .data$html_page_raw)\n  )\n  \n  list(\n    # Add _site.yml as a dependency\n    # Have to use tar_target_raw() instead of tar_target() so that yaml_config is usable\n    tar_target_raw(\"site_yml\", yaml_config, format = \"file\"),\n    \n    # Prepare targets for each of the notebook pages\n    tarchetypes::tar_eval_raw(\n      quote(\n        targets::tar_target(rmd_page, c(rmd_file, site_yml), format = \"file\")\n      ),\n      values = values\n    ),\n    \n    tarchetypes::tar_eval_raw(\n      quote(\n        targets::tar_target(\n          html_page,\n          command = {\n            rmd_deps\n            sym_rmd_page\n            knit_notebook_page(rmd_file, html_file);\n            html_file\n          },\n          format = \"file\"\n        )\n      ),\n      values = values\n    )\n  )\n}\n\ncopy_notebook_supporting_files <- function(rmd, ...) {\n  rmarkdown::render_site(rmd, encoding = \"UTF-8\")\n}\n```\n:::\n\n\n\n\n\n#### `R/graphics.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# https://carto.com/carto-colors/\nclrs <- list(Prism = rcartocolor::carto_pal(n = 12, \"Prism\"),\n             PurpOr = rcartocolor::carto_pal(7, \"PurpOr\"),\n             Emrld = rcartocolor::carto_pal(7, \"Emrld\"),\n             Teal = rcartocolor::carto_pal(7, \"Teal\"),\n             Peach = rcartocolor::carto_pal(7, \"Peach\"),\n             Sunset = rcartocolor::carto_pal(7, \"Sunset\"))\n\nset_annotation_fonts <- function() {\n  ggplot2::update_geom_defaults(\"label\", list(family = \"Inter\", face = \"plain\"))\n  ggplot2::update_geom_defaults(\"text\", list(family = \"Inter\", face = \"plain\"))\n}\n\ntheme_donors <- function(base_size = 11, base_family = \"Inter\", prior = FALSE) {\n  ret <- theme_bw(base_size, base_family) +\n    theme(panel.background = element_rect(fill = \"#ffffff\", colour = NA),\n          plot.title = element_text(size = rel(1.1), vjust = 1.2,\n                               family = \"Inter\", face = \"bold\"),\n          plot.subtitle = element_text(size = rel(0.8),\n                                       family = \"Inter\", face = \"plain\"),\n          plot.caption = element_text(margin = margin(t = 10), size = rel(0.6),\n                                      family = \"Inter\", face = \"plain\"),\n          panel.border = element_rect(color = \"grey50\", fill = NA, linewidth = 0.15),\n          panel.spacing = unit(1, \"lines\"),\n          panel.grid.minor = element_blank(),\n          panel.grid.major = element_line(size = 0.25, colour = \"grey90\"),\n          axis.line = element_blank(),\n          axis.ticks = element_blank(),\n          axis.title = element_text(size = rel(0.8),\n                                    family = \"Inter\", face = \"bold\"),\n          axis.title.y = element_text(margin = margin(r = 10)),\n          axis.title.x = element_text(margin = margin(t = 10)),\n          legend.position = \"bottom\",\n          legend.title = element_text(size = rel(0.8)),\n          legend.key.size = unit(0.7, \"line\"),\n          legend.key = element_blank(),\n          legend.spacing = unit(0.1, \"lines\"),\n          legend.margin = margin(t = 0),\n          strip.text = element_text(size = rel(0.9), hjust = 0,\n                                    family = \"Inter\", face = \"bold\"),\n          strip.background = element_rect(fill = \"white\", colour = NA))\n  \n  if (prior) {\n    ret <- ret +\n      theme(panel.grid.major = element_blank(),\n            axis.title.y = element_blank(),\n            axis.text.y = element_blank(),\n            panel.border = element_blank())\n  } else {\n    ret\n  }\n}\n\ntheme_donors_map <- function(base_size = 9, base_family = \"Inter\") {\n  ret <- theme_void(base_size, base_family) +\n    theme(plot.background = element_rect(fill = \"#ffffff\", colour = NA),\n          legend.position = \"bottom\")\n  \n  ret\n}\n\n#' Convert mms to pts\n#' \n#' Convert units specified in millimeters to typographic points. This is especially helpful when working with ggplot geoms that use size parameters\n#'\n#' @param x a numeric value (in millimeters)\n#'\n#' @return A numeric value (in points)\n#' @export\n#'\n#' @examples\n#' library(ggplot2)\n#' \n#' ggplot(mtcars, aes(x = mpg, y = wt)) +\n#'   geom_point() +\n#'   annotate(geom = \"text\", x = 20, y = 4, \n#'            label = \"Here's a label\", size = pts(11))\npts <- function(x) {\n  as.numeric(grid::convertUnit(grid::unit(x, \"pt\"), \"mm\"))\n}\n\n```\n:::\n\n\n\n\n\n#### `R/misc.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmatrix_from_vector <- function(x, ncol) {\n  n_balanced <- ceiling(length(x) / ncol) * ncol\n  matrix(c(x, rep(NA, n_balanced - length(x))), ncol = ncol)\n}\n```\n:::\n\n\n\n\n\n#### `R/models_oda.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Settings ----------------------------------------------------------------\n\noda_setup <- function() {\n  options(worker_options)\n  \n  # Settings\n  CHAINS <- 4\n  ITER <- 5000\n  WARMUP <- 1000\n  BAYES_SEED <- 4045  # From random.org\n  \n  # Priors\n  prior_num <- c(set_prior(\"student_t(5, 0, 1.5)\", class = \"Intercept\"),\n                 set_prior(\"normal(0, 2.5)\", class = \"b\"),\n                 set_prior(\"cauchy(0, 1)\", class = \"sd\"))\n  \n  prior_denom <- c(set_prior(\"student_t(5, 0, 1.5)\", class = \"Intercept\"),\n                   set_prior(\"normal(0, 2.5)\", class = \"b\"),\n                   set_prior(\"cauchy(0, 1)\", class = \"sd\"))\n  \n  prior_out <- c(set_prior(\"normal(0, 10)\", class = \"Intercept\"),\n                 set_prior(\"normal(0, 1)\", class = \"b\"),\n                 set_prior(\"cauchy(0, 1)\", class = \"sd\"),\n                 set_prior(\"lkj(6)\", class = \"cor\"))\n  \n  \n  \n  return(list(chains = CHAINS, iter = ITER, warmup = WARMUP, seed = BAYES_SEED,\n              prior_num = prior_num, prior_denom = prior_denom, prior_out = prior_out))\n}\n\n\n# Preliminary models ------------------------------------------------------\n\nf_oda_prelim_time_only_total <- function(dat) {\n  dat <- dat %>% filter(laws)\n  \n  priors <- c(prior(normal(20, 2.5), class = Intercept),\n              prior(normal(0, 2), class = b),\n              prior(exponential(1), class = sigma),\n              prior(exponential(1), class = sd),\n              prior(lkj(2), class = cor),\n              prior(student_t(3, -2, 1.5), class = Intercept, dpar = hu),\n              prior(student_t(3, 0, 1.5), class = b, dpar = hu))\n  \n  # Technically we could just use sample_prior = \"yes\" to do both the prior and\n  # posterior sampling simultaneously, but getting the draws out is annoyingly\n  # tricky and doesn't (yet) work with tidybayes\n  # (https://github.com/mjskay/tidybayes/issues/226), so it's easier to just run\n  # two separate models\n  model_prior_only <- brm(\n    bf(total_oda ~ year_c + (1 + year_c | gwcode),\n       hu ~ year_c,\n       decomp = \"QR\"),\n    data = dat,\n    family = hurdle_lognormal(),\n    prior = priors,\n    sample_prior = \"only\",\n    chains = bayes_settings$chains, iter = bayes_settings$iter, \n    warmup = bayes_settings$warmup, seed = bayes_settings$seed$oda\n  )\n  \n  model <- brm(\n    bf(total_oda ~ year_c + (1 + year_c | gwcode),\n       hu ~ year_c,\n       decomp = \"QR\"),\n    data = dat,\n    family = hurdle_lognormal(),\n    prior = priors,\n    chains = bayes_settings$chains, iter = bayes_settings$iter, \n    warmup = bayes_settings$warmup, seed = bayes_settings$seed$oda\n  )\n  \n  return(lst(model, priors, model_prior_only))\n}\n\n\n# Treatment models --------------------------------------------------------\n\nf_oda_treatment_total <- function(dat) {\n  oda_settings <- oda_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(barriers_total ~ barriers_total_lag1 + \n         barriers_total_lag2_cumsum + (1 | gwcode),\n       decomp = \"QR\"),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    threads = threading(2),\n    chains = oda_settings$chains, iter = oda_settings$iter,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(barriers_total ~ barriers_total_lag1 + \n         barriers_total_lag2_cumsum + total_oda_log_lag1 +\n         # Human rights and politics\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         # Economics and development\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         # Conflict and disasters\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode),\n       decomp = \"QR\"),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_denom,\n    control = list(adapt_delta = 0.9),\n    threads = threading(2),\n    chains = oda_settings$chains, iter = oda_settings$iter,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_oda_treatment_advocacy <- function(dat) {\n  oda_settings <- oda_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(advocacy ~ advocacy_lag1 + advocacy_lag2_cumsum + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = oda_settings$chains, iter = oda_settings$iter,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(advocacy ~ advocacy_lag1 + advocacy_lag2_cumsum + total_oda_log_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_denom,\n    control = list(adapt_delta = 0.9),\n    chains = oda_settings$chains, iter = oda_settings$iter,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_oda_treatment_entry <- function(dat) {\n  oda_settings <- oda_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(entry ~ entry_lag1 + entry_lag2_cumsum + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = oda_settings$chains, iter = oda_settings$iter,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(entry ~ entry_lag1 + entry_lag2_cumsum + total_oda_log_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_denom,\n    control = list(adapt_delta = 0.9),\n    chains = oda_settings$chains, iter = oda_settings$iter,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_oda_treatment_funding <- function(dat) {\n  oda_settings <- oda_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(funding ~ funding_lag1 + funding_lag2_cumsum + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = oda_settings$chains, iter = oda_settings$iter,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(funding ~ funding_lag1 + funding_lag2_cumsum + total_oda_log_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_denom,\n    control = list(adapt_delta = 0.9),\n    chains = oda_settings$chains, iter = oda_settings$iter,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_oda_treatment_ccsi <- function(dat) {\n  oda_settings <- oda_setup()\n  \n  model_num <- brm(\n    bf(v2xcs_ccsi ~ v2xcs_ccsi_lag1 + v2xcs_ccsi_lag2_cumsum + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = oda_settings$chains, iter = oda_settings$iter * 2,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(v2xcs_ccsi ~ v2xcs_ccsi_lag1 + v2xcs_ccsi_lag2_cumsum + total_oda_log_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_denom,\n    control = list(adapt_delta = 0.9),\n    chains = oda_settings$chains, iter = oda_settings$iter * 2,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\n\n# Outcome models ----------------------------------------------------------\n\nf_oda_outcome_total <- function(dat) {\n  oda_settings <- oda_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model <- brm(\n    bf(total_oda_log_lead1 | weights(iptw) ~ barriers_total + \n         barriers_total_lag1_cumsum +\n         year_small + (1 + year_small | gwcode),\n       decomp = \"QR\"),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_out,\n    control = list(adapt_delta = 0.95),\n    threads = threading(2),\n    chains = oda_settings$chains, iter = oda_settings$iter * 2,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  return(model)\n}\n\nf_oda_outcome_advocacy <- function(dat) {\n  oda_settings <- oda_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model <- brm(\n    bf(total_oda_log_lead1 | weights(iptw) ~ advocacy + advocacy_lag1_cumsum +\n         year_small + (1 + year_small | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_out,\n    chains = oda_settings$chains, iter = oda_settings$iter * 2,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  return(model)\n}\n\nf_oda_outcome_entry <- function(dat) {\n  oda_settings <- oda_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model <- brm(\n    bf(total_oda_log_lead1 | weights(iptw) ~ entry + entry_lag1_cumsum +\n         year_small + (1 + year_small | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_out,\n    chains = oda_settings$chains, iter = oda_settings$iter * 2,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  return(model)\n}\n\nf_oda_outcome_funding <- function(dat) {\n  oda_settings <- oda_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model <- brm(\n    bf(total_oda_log_lead1 | weights(iptw) ~ funding + funding_lag1_cumsum +\n         year_small + (1 + year_small | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = oda_settings$prior_out,\n    chains = oda_settings$chains, iter = oda_settings$iter * 2,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  return(model)\n}\n\nf_oda_outcome_ccsi <- function(dat) {\n  oda_settings <- oda_setup()\n  \n  dat_100 <- dat %>% mutate(iptw = ifelse(iptw > 100, 100, iptw))\n  dat_500 <- dat %>% mutate(iptw = ifelse(iptw > 500, 500, iptw))\n  dat_1000 <- dat %>% mutate(iptw = ifelse(iptw > 1000, 1000, iptw))\n  dat_5000 <- dat %>% mutate(iptw = ifelse(iptw > 5000, 5000, iptw))\n  \n  model_100 <- brm(\n    bf(total_oda_log_lead1 | weights(iptw) ~ v2xcs_ccsi + v2xcs_ccsi_lag1_cumsum + \n         year_small + (1 + year_small | gwcode)),\n    data = dat_100,\n    family = gaussian(),\n    prior = oda_settings$prior_out,\n    control = list(adapt_delta = 0.9,\n                   max_treedepth = 13),\n    chains = oda_settings$chains, iter = oda_settings$iter * 2,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  model_500 <- brm(\n    bf(total_oda_log_lead1 | weights(iptw) ~ v2xcs_ccsi + v2xcs_ccsi_lag1_cumsum + \n         year_small + (1 + year_small | gwcode)),\n    data = dat_500,\n    family = gaussian(),\n    prior = oda_settings$prior_out,\n    control = list(adapt_delta = 0.9,\n                   max_treedepth = 13),\n    chains = oda_settings$chains, iter = oda_settings$iter * 2,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  model_1000 <- brm(\n    bf(total_oda_log_lead1 | weights(iptw) ~ v2xcs_ccsi + v2xcs_ccsi_lag1_cumsum + \n         year_small + (1 + year_small | gwcode)),\n    data = dat_1000,\n    family = gaussian(),\n    prior = oda_settings$prior_out,\n    control = list(adapt_delta = 0.9,\n                   max_treedepth = 13),\n    chains = oda_settings$chains, iter = oda_settings$iter * 2,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  model_5000 <- brm(\n    bf(total_oda_log_lead1 | weights(iptw) ~ v2xcs_ccsi + v2xcs_ccsi_lag1_cumsum + \n         year_small + (1 + year_small | gwcode)),\n    data = dat_5000,\n    family = gaussian(),\n    prior = oda_settings$prior_out,\n    control = list(adapt_delta = 0.9,\n                   max_treedepth = 13),\n    chains = oda_settings$chains, iter = oda_settings$iter * 2,\n    warmup = oda_settings$warmup, seed = oda_settings$seed\n  )\n  \n  return(lst(model_100, model_500, model_1000, model_5000))\n}\n```\n:::\n\n\n\n\n\n#### `R/models_purpose.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Settings ----------------------------------------------------------------\n\npurpose_setup <- function() {\n  options(worker_options)\n  \n  # Settings\n  CHAINS <- 4\n  ITER <- 2000\n  WARMUP <- 1000\n  BAYES_SEED <- 3246  # From random.org\n  \n  # Priors\n  prior_num <- c(set_prior(\"student_t(5, 0, 1.5)\", class = \"Intercept\"),\n                 set_prior(\"normal(0, 2.5)\", class = \"b\"),\n                 set_prior(\"cauchy(0, 1)\", class = \"sd\"))\n  \n  prior_denom <- c(set_prior(\"student_t(5, 0, 1.5)\", class = \"Intercept\"),\n                   set_prior(\"normal(0, 2.5)\", class = \"b\"),\n                   set_prior(\"cauchy(0, 1)\", class = \"sd\"))\n  \n  prior_out_logit <-  c(set_prior(\"student_t(3, 0, 2.5)\", class = \"Intercept\"),\n                        set_prior(\"normal(0, 1)\", class = \"b\"),\n                        set_prior(\"cauchy(0, 1)\", class = \"sd\"))\n  \n  return(list(chains = CHAINS, iter = ITER, warmup = WARMUP, seed = BAYES_SEED,\n              prior_num = prior_num, prior_denom = prior_denom, \n              prior_out_logit = prior_out_logit))\n}\n\n\n# Preliminary models ------------------------------------------------------\n\nf_purpose_prelim_time_only_total <- function(dat) {\n  dat <- dat %>% filter(laws)\n  \n  priors <- c(prior(student_t(3, 0, 1.5), class = Intercept),\n              prior(student_t(3, 0, 1.5), class = b),\n              prior(exponential(1), class = phi),\n              prior(exponential(1), class = sd),\n              prior(lkj(2), class = cor),\n              prior(student_t(3, 0, 1.5), class = Intercept, dpar = zi),\n              prior(student_t(3, 0, 1.5), class = b, dpar = zi))\n  \n  model <- brm(\n    bf(prop_contentious_trunc ~ year_c + (1 + year_c | gwcode),\n       zi ~ year_c,\n       decomp = \"QR\"),\n    data = dat,\n    family = zero_inflated_beta(),\n    prior = priors,\n    init = \"0\",\n    chains = bayes_settings$chains, iter = bayes_settings$iter, \n    warmup = bayes_settings$warmup, seed = bayes_settings$seed$purpose\n  )\n  \n  return(lst(model, priors))\n}\n\n\n# Treatment models --------------------------------------------------------\n\nf_purpose_treatment_total <- function(dat) {\n  purpose_settings <- purpose_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(barriers_total ~ barriers_total_lag1 + \n         barriers_total_lag2_cumsum + (1 | gwcode),\n       decomp = \"QR\"),\n    data = dat,\n    family = gaussian(),\n    prior = purpose_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    threads = threading(2),\n    chains = purpose_settings$chains, iter = purpose_settings$iter,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(barriers_total ~ barriers_total_lag1 + \n         barriers_total_lag2_cumsum + prop_contentious_lag1 +\n         # Human rights and politics\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         # Economics and development\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         # Conflict and disasters\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = purpose_settings$prior_denom,\n    control = list(adapt_delta = 0.9),\n    threads = threading(2),\n    chains = purpose_settings$chains, iter = purpose_settings$iter,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_purpose_treatment_advocacy <- function(dat) {\n  purpose_settings <- purpose_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(advocacy ~ advocacy_lag1 + advocacy_lag2_cumsum + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = purpose_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = purpose_settings$chains, iter = purpose_settings$iter,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(advocacy ~ advocacy_lag1 + \n         advocacy_lag2_cumsum + prop_contentious_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = purpose_settings$prior_denom,\n    control = list(adapt_delta = 0.9),\n    chains = purpose_settings$chains, iter = purpose_settings$iter,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_purpose_treatment_entry <- function(dat) {\n  purpose_settings <- purpose_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(entry ~ entry_lag1 + entry_lag2_cumsum + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = purpose_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = purpose_settings$chains, iter = purpose_settings$iter,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(entry ~ entry_lag1 + \n         entry_lag2_cumsum + prop_contentious_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = purpose_settings$prior_denom,\n    control = list(adapt_delta = 0.9),\n    chains = purpose_settings$chains, iter = purpose_settings$iter,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_purpose_treatment_funding <- function(dat) {\n  purpose_settings <- purpose_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(funding ~ funding_lag1 + funding_lag2_cumsum + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = purpose_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = purpose_settings$chains, iter = purpose_settings$iter,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(funding ~ funding_lag1 + \n         funding_lag2_cumsum + prop_contentious_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = purpose_settings$prior_denom,\n    control = list(adapt_delta = 0.9),\n    chains = purpose_settings$chains, iter = purpose_settings$iter,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_purpose_treatment_ccsi <- function(dat) {\n  purpose_settings <- purpose_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(v2xcs_ccsi ~ v2xcs_ccsi_lag1 + v2xcs_ccsi_lag2_cumsum + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = purpose_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = purpose_settings$chains, iter = purpose_settings$iter,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(v2xcs_ccsi ~ v2xcs_ccsi_lag1 + \n         v2xcs_ccsi_lag2_cumsum + prop_contentious_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = purpose_settings$prior_denom,\n    control = list(adapt_delta = 0.9,\n                   max_treedepth = 13),\n    chains = purpose_settings$chains, iter = purpose_settings$iter,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\n\n# Outcome models ----------------------------------------------------------\n\nf_purpose_outcome_total <- function(dat) {\n  purpose_settings <- purpose_setup()\n  \n  dat <- dat %>% filter(laws) %>% \n    mutate(prop_contentious_lead1 = ifelse(prop_contentious_lead1 == 1, 0.99, prop_contentious_lead1))\n  \n  model <- brm(\n    bf(prop_contentious_lead1 | weights(iptw) ~ barriers_total + \n         barriers_total_lag1_cumsum +\n         year_small + (1 + year_small | gwcode),\n       phi ~ 1,\n       zi ~ barriers_total,\n       decomp = \"QR\"),\n    data = dat,\n    family = zero_inflated_beta(),\n    prior = purpose_settings$prior_out_logit,\n    inits = \"0\",\n    threads = threading(2),\n    chains = purpose_settings$chains, iter = purpose_settings$iter * 2,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  return(model)\n}\n\nf_purpose_outcome_advocacy <- function(dat) {\n  purpose_settings <- purpose_setup()\n  \n  dat <- dat %>% filter(laws) %>% \n    mutate(prop_contentious_lead1 = ifelse(prop_contentious_lead1 == 1, 0.99, prop_contentious_lead1))\n  \n  model <- brm(\n    bf(prop_contentious_lead1 | weights(iptw) ~ advocacy + advocacy_lag1_cumsum +\n         year_small + (1 + year_small | gwcode),\n       phi ~ 1,\n       zi ~ advocacy,\n       decomp = \"QR\"),\n    data = dat,\n    family = zero_inflated_beta(),\n    prior = purpose_settings$prior_out_logit,\n    inits = \"0\",\n    threads = threading(2),\n    chains = purpose_settings$chains, iter = purpose_settings$iter * 2,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  return(model)\n}\n\nf_purpose_outcome_entry <- function(dat) {\n  purpose_settings <- purpose_setup()\n  \n  dat <- dat %>% filter(laws) %>% \n    mutate(prop_contentious_lead1 = ifelse(prop_contentious_lead1 == 1, 0.99, prop_contentious_lead1))\n  \n  model <- brm(\n    bf(prop_contentious_lead1 | weights(iptw) ~ entry + entry_lag1_cumsum +\n         year_small + (1 + year_small | gwcode),\n       phi ~ 1,\n       zi ~ entry,\n       decomp = \"QR\"),\n    data = dat,\n    family = zero_inflated_beta(),\n    prior = purpose_settings$prior_out_logit,\n    inits = \"0\",\n    threads = threading(2),\n    chains = purpose_settings$chains, iter = purpose_settings$iter * 2,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  return(model)\n}\n\nf_purpose_outcome_funding <- function(dat) {\n  purpose_settings <- purpose_setup()\n  \n  dat <- dat %>% filter(laws) %>% \n    mutate(prop_contentious_lead1 = ifelse(prop_contentious_lead1 == 1, 0.99, prop_contentious_lead1))\n  \n  model <- brm(\n    bf(prop_contentious_lead1 | weights(iptw) ~ funding + funding_lag1_cumsum +\n         year_small + (1 + year_small | gwcode),\n       phi ~ 1,\n       zi ~ funding,\n       decomp = \"QR\"),\n    data = dat,\n    family = zero_inflated_beta(),\n    prior = purpose_settings$prior_out_logit,\n    inits = \"0\",\n    threads = threading(2),\n    chains = purpose_settings$chains, iter = purpose_settings$iter * 2,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  return(model)\n}\n\n# Including (1 | year) here blows up the models and makes them not converge at\n# all (see https://twitter.com/andrewheiss/status/1396545208163127297)\nf_purpose_outcome_ccsi <- function(dat) {\n  purpose_settings <- purpose_setup()\n  \n  dat <- dat %>% filter(laws) %>% \n    mutate(prop_contentious_lead1 = ifelse(prop_contentious_lead1 == 1, 0.99, prop_contentious_lead1))\n  \n  dat_100 <- dat %>% mutate(iptw = ifelse(iptw > 100, 100, iptw))\n  dat_500 <- dat %>% mutate(iptw = ifelse(iptw > 500, 500, iptw))\n  dat_1000 <- dat %>% mutate(iptw = ifelse(iptw > 1000, 1000, iptw))\n  dat_5000 <- dat %>% mutate(iptw = ifelse(iptw > 5000, 5000, iptw))\n  \n  model_100 <- brm(\n    bf(prop_contentious_lead1 | weights(iptw) ~ v2xcs_ccsi + v2xcs_ccsi_lag1_cumsum +\n         year_small + (1 + year_small | gwcode),\n       phi ~ 1,\n       zi ~ funding,\n       decomp = \"QR\"),\n    data = dat_100,\n    family = zero_inflated_beta(),\n    control = list(adapt_delta = 0.9,\n                   max_treedepth = 13),\n    prior = purpose_settings$prior_out_logit,\n    inits = \"0\",\n    threads = threading(2),\n    chains = purpose_settings$chains, iter = purpose_settings$iter * 2,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  model_500 <- brm(\n    bf(prop_contentious_lead1 | weights(iptw) ~ v2xcs_ccsi + v2xcs_ccsi_lag1_cumsum +\n         year_small + (1 + year_small | gwcode),\n       phi ~ 1,\n       zi ~ funding,\n       decomp = \"QR\"),\n    data = dat_500,\n    family = zero_inflated_beta(),\n    control = list(adapt_delta = 0.9,\n                   max_treedepth = 13),\n    prior = purpose_settings$prior_out_logit,\n    inits = \"0\",\n    threads = threading(2),\n    chains = purpose_settings$chains, iter = purpose_settings$iter * 2,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  model_1000 <- brm(\n    bf(prop_contentious_lead1 | weights(iptw) ~ v2xcs_ccsi + v2xcs_ccsi_lag1_cumsum +\n         year_small + (1 + year_small | gwcode),\n       phi ~ 1,\n       zi ~ funding,\n       decomp = \"QR\"),\n    data = dat_1000,\n    family = zero_inflated_beta(),\n    control = list(adapt_delta = 0.9,\n                   max_treedepth = 13),\n    prior = purpose_settings$prior_out_logit,\n    inits = \"0\",\n    threads = threading(2),\n    chains = purpose_settings$chains, iter = purpose_settings$iter * 2,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  model_5000 <- brm(\n    bf(prop_contentious_lead1 | weights(iptw) ~ v2xcs_ccsi + v2xcs_ccsi_lag1_cumsum +\n         year_small + (1 + year_small | gwcode),\n       phi ~ 1,\n       zi ~ funding,\n       decomp = \"QR\"),\n    data = dat_5000,\n    family = zero_inflated_beta(),\n    control = list(adapt_delta = 0.9,\n                   max_treedepth = 13),\n    prior = purpose_settings$prior_out_logit,\n    inits = \"0\",\n    threads = threading(2),\n    chains = purpose_settings$chains, iter = purpose_settings$iter * 2,\n    warmup = purpose_settings$warmup, seed = purpose_settings$seed\n  )\n  \n  return(lst(model_100, model_500, model_1000, model_5000))\n}\n```\n:::\n\n\n\n\n\n#### `R/models_recipients.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Settings ----------------------------------------------------------------\n\nrecip_setup <- function() {\n  options(worker_options)\n  \n  # Settings\n  CHAINS <- 4\n  ITER <- 2000\n  WARMUP <- 1000\n  BAYES_SEED <- 4045  # From random.org\n  \n  # Priors\n  prior_num <- c(set_prior(\"normal(0, 10)\", class = \"Intercept\"),\n                 set_prior(\"normal(0, 2.5)\", class = \"b\"),\n                 set_prior(\"cauchy(0, 1)\", class = \"sd\"))\n  \n  prior_denom <- c(set_prior(\"normal(0, 10)\", class = \"Intercept\"),\n                   set_prior(\"normal(0, 2.5)\", class = \"b\"),\n                   set_prior(\"normal(0, 2.5)\", class = \"sd\"))\n  \n  prior_out <- c(set_prior(\"normal(0, 10)\", class = \"Intercept\"),\n                 set_prior(\"normal(0, 3)\", class = \"b\"),\n                 set_prior(\"cauchy(0, 1)\", class = \"sd\"),\n                 set_prior(\"logistic(-0.5, 0.35)\", class = \"Intercept\", dpar = \"zi\"),\n                 set_prior(\"gamma(0.01, 0.01)\", class = \"phi\"))\n  \n  return(list(chains = CHAINS, iter = ITER, warmup = WARMUP, seed = BAYES_SEED,\n              prior_num = prior_num, prior_denom = prior_denom, prior_out = prior_out))\n}\n\n\n# Treatment models --------------------------------------------------------\n\nf_recip_treatment_total_dom <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(barriers_total ~ barriers_total_lag1 + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(barriers_total ~ barriers_total_lag1 + prop_ngo_dom_lag1 +\n         # Human rights and politics\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         # Economics and development\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         # Conflict and disasters\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.9),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_recip_treatment_total_foreign <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(barriers_total ~ barriers_total_lag1 + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(barriers_total ~ barriers_total_lag1 + prop_ngo_foreign_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.9),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_recip_treatment_advocacy_dom <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(advocacy ~ advocacy_lag1 + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(advocacy ~ advocacy_lag1 + prop_ngo_dom_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.9),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_recip_treatment_advocacy_foreign <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(advocacy ~ advocacy_lag1 + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(advocacy ~ advocacy_lag1 + prop_ngo_foreign_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.9),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_recip_treatment_entry_dom <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(entry ~ entry_lag1 + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(entry ~ entry_lag1 + prop_ngo_dom_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.9),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_recip_treatment_entry_foreign <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(entry ~ entry_lag1 + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(entry ~ entry_lag1 + prop_ngo_foreign_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.9),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_recip_treatment_funding_dom <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(funding ~ funding_lag1 + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(funding ~ funding_lag1 + prop_ngo_dom_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.9),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\nf_recip_treatment_funding_foreign <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model_num <- brm(\n    bf(funding ~ funding_lag1 + (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.99),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  model_denom <- brm(\n    bf(funding ~ funding_lag1 + prop_ngo_foreign_lag1 +\n         v2x_polyarchy + v2x_corr + v2x_rule + v2x_civlib + v2x_clphy + v2x_clpriv +\n         gdpcap_log + un_trade_pct_gdp + v2peedueq + v2pehealth + e_peinfmor +\n         internal_conflict_past_5 + natural_dis_count +\n         (1 | gwcode)),\n    data = dat,\n    family = gaussian(),\n    prior = recip_settings$prior_num,\n    control = list(adapt_delta = 0.9),\n    chains = recip_settings$chains, iter = recip_settings$iter,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(lst(model_num, model_denom))\n}\n\n\n# Outcome models ----------------------------------------------------------\n\nf_recip_outcome_total_dom <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model <- brm(\n    bf(prop_ngo_dom_lead1 | weights(iptw) ~ \n         barriers_total + (1 | gwcode),\n       zi ~ 1),\n    data = dat,\n    family = zero_inflated_beta(),\n    prior = recip_settings$prior_out,\n    chains = recip_settings$chains, iter = recip_settings$iter * 2,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(model)\n}\n\nf_recip_outcome_total_foreign <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model <- brm(\n    bf(prop_ngo_foreign_lead1 | weights(iptw) ~ \n         barriers_total + (1 | gwcode),\n       zi ~ 1),\n    data = dat,\n    family = zero_inflated_beta(),\n    prior = recip_settings$prior_out,\n    chains = recip_settings$chains, iter = recip_settings$iter * 2,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(model)\n}\n\nf_recip_outcome_advocacy_dom <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model <- brm(\n    bf(prop_ngo_dom_lead1 | weights(iptw) ~ \n         advocacy + (1 | gwcode),\n       zi ~ 1),\n    data = dat,\n    family = zero_inflated_beta(),\n    prior = recip_settings$prior_out,\n    chains = recip_settings$chains, iter = recip_settings$iter * 2,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(model)\n}\n\nf_recip_outcome_advocacy_foreign <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model <- brm(\n    bf(prop_ngo_foreign_lead1 | weights(iptw) ~ \n         advocacy + (1 | gwcode),\n       zi ~ 1),\n    data = dat,\n    family = zero_inflated_beta(),\n    prior = recip_settings$prior_out,\n    chains = recip_settings$chains, iter = recip_settings$iter * 2,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(model)\n}\n\nf_recip_outcome_entry_dom <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model <- brm(\n    bf(prop_ngo_dom_lead1 | weights(iptw) ~ \n         entry + (1 | gwcode),\n       zi ~ 1),\n    data = dat,\n    family = zero_inflated_beta(),\n    prior = recip_settings$prior_out,\n    chains = recip_settings$chains, iter = recip_settings$iter * 2,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(model)\n}\n\nf_recip_outcome_entry_foreign <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model <- brm(\n    bf(prop_ngo_foreign_lead1 | weights(iptw) ~ \n         entry + (1 | gwcode),\n       zi ~ 1),\n    data = dat,\n    family = zero_inflated_beta(),\n    prior = recip_settings$prior_out,\n    chains = recip_settings$chains, iter = recip_settings$iter * 2,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(model)\n}\n\nf_recip_outcome_funding_dom <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model <- brm(\n    bf(prop_ngo_dom_lead1 | weights(iptw) ~ \n         funding + (1 | gwcode),\n       zi ~ 1),\n    data = dat,\n    family = zero_inflated_beta(),\n    prior = recip_settings$prior_out,\n    chains = recip_settings$chains, iter = recip_settings$iter * 2,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(model)\n}\n\nf_recip_outcome_funding_foreign <- function(dat) {\n  recip_settings <- recip_setup()\n  \n  dat <- dat %>% filter(laws)\n  \n  model <- brm(\n    bf(prop_ngo_foreign_lead1 | weights(iptw) ~ \n         funding + (1 | gwcode),\n       zi ~ 1),\n    data = dat,\n    family = zero_inflated_beta(),\n    prior = recip_settings$prior_out,\n    chains = recip_settings$chains, iter = recip_settings$iter * 2,\n    warmup = recip_settings$warmup, seed = recip_settings$seed\n  )\n  \n  return(model)\n}\n```\n:::\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<link href=\"../site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/vis-9.1.0/vis-network.min.js\"></script>\n<script src=\"../site_libs/visNetwork-binding-2.1.2/visNetwork.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}